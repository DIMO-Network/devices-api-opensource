basePath: /v1
definitions:
  apitypes.Type:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  apitypes.TypedData:
    properties:
      domain:
        $ref: '#/definitions/apitypes.TypedDataDomain'
      message:
        $ref: '#/definitions/apitypes.TypedDataMessage'
      primaryType:
        type: string
      types:
        $ref: '#/definitions/apitypes.Types'
    type: object
  apitypes.TypedDataDomain:
    properties:
      chainId:
        $ref: '#/definitions/math.HexOrDecimal256'
      name:
        type: string
      salt:
        type: string
      verifyingContract:
        type: string
      version:
        type: string
    type: object
  apitypes.TypedDataMessage:
    additionalProperties: true
    type: object
  apitypes.Types:
    additionalProperties:
      items:
        $ref: '#/definitions/apitypes.Type'
      type: array
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.AutoPiCommandRequest:
    properties:
      command:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.AutoPiDeviceInfo:
    properties:
      deviceId:
        type: string
      dockerReleases:
        items:
          type: integer
        type: array
      hwRevision:
        type: string
      isUpdated:
        type: boolean
      lastCommunication:
        type: string
      releaseVersion:
        type: string
      shouldUpdate:
        type: boolean
      template:
        type: integer
      unitId:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.ChargeLimitBody:
    properties:
      chargeLimit:
        description: |-
          ChargeLimit is the charge limit, a value from 0.0 to 1.0, inclusive.
          Note that not all of these values may be allowed by the device.
        example: 0.7
        format: float
        maximum: 1
        minimum: 0
        type: number
    required:
    - chargeLimit
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.CreateGeofence:
    properties:
      h3Indexes:
        description: 'required: false'
        items:
          type: string
        type: array
      name:
        description: 'required: true'
        type: string
      type:
        description: |-
          one of following: "PrivacyFence", "TriggerEntry", "TriggerExit"
          required: true
        type: string
      userDeviceIds:
        description: Optionally link the geofence with a list of user device ID
        items:
          type: string
        type: array
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.CreateResponse:
    properties:
      id:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.DeviceMMYRoot:
    properties:
      make:
        type: string
      models:
        items:
          $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DeviceModels'
        type: array
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.DeviceModelYear:
    properties:
      id:
        type: string
      year:
        type: integer
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.DeviceModels:
    properties:
      model:
        type: string
      years:
        items:
          $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DeviceModelYear'
        type: array
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.DeviceSnapshot:
    properties:
      batteryCapacity:
        type: integer
      chargeLimit:
        type: number
      charging:
        type: boolean
      fuelPercentRemaining:
        type: number
      latitude:
        type: number
      longitude:
        type: number
      odometer:
        type: number
      oil:
        type: number
      range:
        type: number
      recordCreatedAt:
        type: string
      recordUpdatedAt:
        type: string
      soc:
        description: 'todo: change json to match after update frontend'
        type: number
      tirePressure:
        $ref: '#/definitions/smartcar.TirePressure'
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.DocumentResponse:
    properties:
      createdAt:
        type: string
      ext:
        type: string
      id:
        type: string
      name:
        type: string
      type:
        type: string
      url:
        type: string
      userDeviceId:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.GeoFenceUserDevice:
    properties:
      mmy:
        type: string
      name:
        type: string
      userDeviceId:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.GetGeofence:
    properties:
      createdAt:
        type: string
      h3Indexes:
        items:
          type: string
        type: array
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      userDevices:
        items:
          $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.GeoFenceUserDevice'
        type: array
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.GetUserDeviceIntegrationResponse:
    properties:
      createdAt:
        description: CreatedAt is the creation time of this integration for this device.
        type: string
      externalId:
        description: |-
          ExternalID is the identifier used by the third party for the device. It may be absent if we
          haven't authorized yet.
        type: string
      status:
        description: Status is one of "Pending", "PendingFirstData", "Active", "Failed",
          "DuplicateIntegration".
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.MintRequest:
    properties:
      imageData:
        description: ImageData contains the base64-encoded NFT PNG image.
        type: string
      signature:
        description: Signature is the hex encoding of the EIP-712 signature result.
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.NFTAttribute:
    properties:
      trait_type:
        type: string
      value:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.NFTData:
    properties:
      status:
        description: Status is the minting status of the NFT.
        enum:
        - Unstarted
        - Submitted
        - Mined
        - Confirmed
        example: Confirmed
        type: string
      tokenId:
        example: 37
        type: number
      tokenUri:
        example: https://nft.dimo.zone/37
        type: string
      txHash:
        description: TxHash is the hash of the minting transaction.
        example: 0x30bce3da6985897224b29a0fe064fd2b426bb85a394cc09efe823b5c83326a8e
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.NFTMetadataResp:
    properties:
      attributes:
        items:
          $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.NFTAttribute'
        type: array
      description:
        type: string
      image:
        type: string
      name:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.RegisterDeviceIntegrationRequest:
    properties:
      accessToken:
        type: string
      code:
        description: Code is an OAuth authorization code. Not used in all integrations.
        type: string
      expiresIn:
        type: integer
      externalId:
        description: ExternalID is the only field needed for AutoPi registrations.
          It is the UnitID.
        type: string
      redirectURI:
        description: RedirectURI is the OAuth redirect URI used by the frontend. Not
          used in all integrations.
        type: string
      refreshToken:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.RegisterUserDevice:
    properties:
      countryCode:
        type: string
      deviceDefinitionId:
        type: string
      make:
        type: string
      model:
        type: string
      year:
        type: integer
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.RegisterUserDeviceResponse:
    properties:
      deviceDefinitionId:
        type: string
      integrationCapabilities:
        items:
          $ref: '#/definitions/services.DeviceCompatibility'
        type: array
      userDeviceId:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.UpdateCountryCodeReq:
    properties:
      countryCode:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.UpdateImageURLReq:
    properties:
      imageUrl:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.UpdateNameReq:
    properties:
      name:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.UpdateVINReq:
    properties:
      vin:
        type: string
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.UserDeviceFull:
    properties:
      countryCode:
        type: string
      customImageUrl:
        type: string
      deviceDefinition:
        $ref: '#/definitions/services.DeviceDefinition'
      id:
        type: string
      integrations:
        items:
          $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.UserDeviceIntegrationStatus'
        type: array
      metadata:
        $ref: '#/definitions/services.UserDeviceMetadata'
      name:
        type: string
      nft:
        $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.NFTData'
      vin:
        type: string
      vinConfirmed:
        type: boolean
    type: object
  github.com_DIMO-Network_devices-api_internal_controllers.UserDeviceIntegrationStatus:
    properties:
      createdAt:
        type: string
      externalId:
        type: string
      integrationId:
        type: string
      integrationVendor:
        type: string
      metadata:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  internal_controllers.AutoPiCommandRequest:
    properties:
      command:
        type: string
    type: object
  internal_controllers.AutoPiDeviceInfo:
    properties:
      deviceId:
        type: string
      dockerReleases:
        items:
          type: integer
        type: array
      hwRevision:
        type: string
      isUpdated:
        type: boolean
      lastCommunication:
        type: string
      releaseVersion:
        type: string
      shouldUpdate:
        type: boolean
      template:
        type: integer
      unitId:
        type: string
    type: object
  internal_controllers.ChargeLimitBody:
    properties:
      chargeLimit:
        description: |-
          ChargeLimit is the charge limit, a value from 0.0 to 1.0, inclusive.
          Note that not all of these values may be allowed by the device.
        example: 0.7
        format: float
        maximum: 1
        minimum: 0
        type: number
    required:
    - chargeLimit
    type: object
  internal_controllers.CreateGeofence:
    properties:
      h3Indexes:
        description: 'required: false'
        items:
          type: string
        type: array
      name:
        description: 'required: true'
        type: string
      type:
        description: |-
          one of following: "PrivacyFence", "TriggerEntry", "TriggerExit"
          required: true
        type: string
      userDeviceIds:
        description: Optionally link the geofence with a list of user device ID
        items:
          type: string
        type: array
    type: object
  internal_controllers.CreateResponse:
    properties:
      id:
        type: string
    type: object
  internal_controllers.DeviceMMYRoot:
    properties:
      make:
        type: string
      models:
        items:
          $ref: '#/definitions/internal_controllers.DeviceModels'
        type: array
    type: object
  internal_controllers.DeviceModelYear:
    properties:
      id:
        type: string
      year:
        type: integer
    type: object
  internal_controllers.DeviceModels:
    properties:
      model:
        type: string
      years:
        items:
          $ref: '#/definitions/internal_controllers.DeviceModelYear'
        type: array
    type: object
  internal_controllers.DeviceSnapshot:
    properties:
      batteryCapacity:
        type: integer
      chargeLimit:
        type: number
      charging:
        type: boolean
      fuelPercentRemaining:
        type: number
      latitude:
        type: number
      longitude:
        type: number
      odometer:
        type: number
      oil:
        type: number
      range:
        type: number
      recordCreatedAt:
        type: string
      recordUpdatedAt:
        type: string
      soc:
        description: 'todo: change json to match after update frontend'
        type: number
      tirePressure:
        $ref: '#/definitions/smartcar.TirePressure'
    type: object
  internal_controllers.DocumentResponse:
    properties:
      createdAt:
        type: string
      ext:
        type: string
      id:
        type: string
      name:
        type: string
      type:
        type: string
      url:
        type: string
      userDeviceId:
        type: string
    type: object
  internal_controllers.GeoFenceUserDevice:
    properties:
      mmy:
        type: string
      name:
        type: string
      userDeviceId:
        type: string
    type: object
  internal_controllers.GetGeofence:
    properties:
      createdAt:
        type: string
      h3Indexes:
        items:
          type: string
        type: array
      id:
        type: string
      name:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      userDevices:
        items:
          $ref: '#/definitions/internal_controllers.GeoFenceUserDevice'
        type: array
    type: object
  internal_controllers.GetUserDeviceIntegrationResponse:
    properties:
      createdAt:
        description: CreatedAt is the creation time of this integration for this device.
        type: string
      externalId:
        description: |-
          ExternalID is the identifier used by the third party for the device. It may be absent if we
          haven't authorized yet.
        type: string
      status:
        description: Status is one of "Pending", "PendingFirstData", "Active", "Failed",
          "DuplicateIntegration".
        type: string
    type: object
  internal_controllers.MintRequest:
    properties:
      imageData:
        description: ImageData contains the base64-encoded NFT PNG image.
        type: string
      signature:
        description: Signature is the hex encoding of the EIP-712 signature result.
        type: string
    type: object
  internal_controllers.NFTAttribute:
    properties:
      trait_type:
        type: string
      value:
        type: string
    type: object
  internal_controllers.NFTData:
    properties:
      status:
        description: Status is the minting status of the NFT.
        enum:
        - Unstarted
        - Submitted
        - Mined
        - Confirmed
        example: Confirmed
        type: string
      tokenId:
        example: 37
        type: number
      tokenUri:
        example: https://nft.dimo.zone/37
        type: string
      txHash:
        description: TxHash is the hash of the minting transaction.
        example: 0x30bce3da6985897224b29a0fe064fd2b426bb85a394cc09efe823b5c83326a8e
        type: string
    type: object
  internal_controllers.NFTMetadataResp:
    properties:
      attributes:
        items:
          $ref: '#/definitions/internal_controllers.NFTAttribute'
        type: array
      description:
        type: string
      image:
        type: string
      name:
        type: string
    type: object
  internal_controllers.RegisterDeviceIntegrationRequest:
    properties:
      accessToken:
        type: string
      code:
        description: Code is an OAuth authorization code. Not used in all integrations.
        type: string
      expiresIn:
        type: integer
      externalId:
        description: ExternalID is the only field needed for AutoPi registrations.
          It is the UnitID.
        type: string
      redirectURI:
        description: RedirectURI is the OAuth redirect URI used by the frontend. Not
          used in all integrations.
        type: string
      refreshToken:
        type: string
    type: object
  internal_controllers.RegisterUserDevice:
    properties:
      countryCode:
        type: string
      deviceDefinitionId:
        type: string
      make:
        type: string
      model:
        type: string
      year:
        type: integer
    type: object
  internal_controllers.RegisterUserDeviceResponse:
    properties:
      deviceDefinitionId:
        type: string
      integrationCapabilities:
        items:
          $ref: '#/definitions/services.DeviceCompatibility'
        type: array
      userDeviceId:
        type: string
    type: object
  internal_controllers.UpdateCountryCodeReq:
    properties:
      countryCode:
        type: string
    type: object
  internal_controllers.UpdateImageURLReq:
    properties:
      imageUrl:
        type: string
    type: object
  internal_controllers.UpdateNameReq:
    properties:
      name:
        type: string
    type: object
  internal_controllers.UpdateVINReq:
    properties:
      vin:
        type: string
    type: object
  internal_controllers.UserDeviceFull:
    properties:
      countryCode:
        type: string
      customImageUrl:
        type: string
      deviceDefinition:
        $ref: '#/definitions/services.DeviceDefinition'
      id:
        type: string
      integrations:
        items:
          $ref: '#/definitions/internal_controllers.UserDeviceIntegrationStatus'
        type: array
      metadata:
        $ref: '#/definitions/services.UserDeviceMetadata'
      name:
        type: string
      nft:
        $ref: '#/definitions/internal_controllers.NFTData'
      vin:
        type: string
      vinConfirmed:
        type: boolean
    type: object
  internal_controllers.UserDeviceIntegrationStatus:
    properties:
      createdAt:
        type: string
      externalId:
        type: string
      integrationId:
        type: string
      integrationVendor:
        type: string
      metadata:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  math.HexOrDecimal256:
    type: object
  models.Integration:
    properties:
      created_at:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/null.JSON'
      refresh_limit_secs:
        description: How often can integration be called in seconds
        type: integer
      style:
        type: string
      type:
        type: string
      updated_at:
        type: string
      vendor:
        type: string
    type: object
  null.JSON:
    properties:
      json:
        items:
          type: integer
        type: array
      valid:
        type: boolean
    type: object
  services.AutoPiCommandJob:
    properties:
      commandJobId:
        type: string
      commandRaw:
        type: string
      commandState:
        type: string
      lastUpdated:
        type: string
    type: object
  services.AutoPiTask:
    properties:
      code:
        type: integer
      description:
        type: string
      error:
        type: string
      status:
        type: string
      taskId:
        type: string
      updatedAt:
        type: string
      updates:
        description: Updates increments every time the job was updated.
        type: integer
    type: object
  services.DeviceCompatibility:
    properties:
      capabilities:
        items:
          type: integer
        type: array
      country:
        type: string
      id:
        type: string
      region:
        type: string
      style:
        type: string
      type:
        type: string
      vendor:
        type: string
    type: object
  services.DeviceDefinition:
    properties:
      compatibleIntegrations:
        description: CompatibleIntegrations has systems this vehicle can integrate
          with
        items:
          $ref: '#/definitions/services.DeviceCompatibility'
        type: array
      deviceDefinitionId:
        type: string
      imageUrl:
        type: string
      metadata: {}
      name:
        type: string
      type:
        $ref: '#/definitions/services.DeviceType'
      vehicleData:
        $ref: '#/definitions/services.DeviceVehicleInfo'
        description: VehicleInfo will be empty if not a vehicle type
      verified:
        type: boolean
    type: object
  services.DeviceType:
    properties:
      make:
        type: string
      model:
        type: string
      subModels:
        items:
          type: string
        type: array
      type:
        description: Type is eg. Vehicle, E-bike, roomba
        type: string
      year:
        type: integer
    type: object
  services.DeviceVehicleInfo:
    properties:
      base_msrp:
        type: integer
      driven_wheels:
        type: string
      epa_class:
        type: string
      fuel_type:
        type: string
      mpg_city:
        type: string
      mpg_highway:
        type: string
      number_of_doors:
        type: string
      vehicle_type:
        description: VehicleType PASSENGER CAR, from NHTSA
        type: string
    type: object
  services.UserDeviceMetadata:
    properties:
      powertrainType:
        type: string
    type: object
  smartcar.TirePressure:
    properties:
      age:
        description: 'Deprecated: Should use DataAge instead of Age'
        type: string
      backLeft:
        type: number
      backRight:
        type: number
      dataAge:
        type: string
      frontLeft:
        type: number
      frontRight:
        type: number
      requestId:
        type: string
      unitSystem:
        type: string
    type: object
info:
  contact: {}
  title: DIMO Devices API
  version: "1.0"
paths:
  /autopi/task/:taskID:
    get:
      description: gets the status of an autopi related task. In future could be other
        tasks too?
      parameters:
      - description: task id
        in: path
        name: taskID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AutoPiTask'
      security:
      - BearerAuth: []
      tags:
      - integrations
  /autopi/unit/:unitID:
    get:
      description: gets the information about the autopi by the unitId
      parameters:
      - description: autopi unit id
        in: path
        name: unitID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_controllers.AutoPiDeviceInfo'
      security:
      - BearerAuth: []
      tags:
      - integrations
  /autopi/unit/:unitID/is-online:
    get:
      description: 'gets whether the autopi is online right now, if already paired
        with a user, makes sure user has access. returns json with {"online": true/false}'
      parameters:
      - description: autopi unit id
        in: path
        name: unitID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - integrations
  /autopi/unit/:unitID/update:
    post:
      description: checks to see if autopi unit needs to be updated, and starts update
        process if so.
      parameters:
      - description: autopi unit id
        in: path
        name: unitID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AutoPiTask'
      security:
      - BearerAuth: []
      tags:
      - integrations
  /device-definitions:
    get:
      description: gets a specific device definition by make model and year
      parameters:
      - description: make eg TESLA
        in: query
        name: make
        required: true
        type: string
      - description: model eg MODEL Y
        in: query
        name: model
        required: true
        type: string
      - description: year eg 2021
        in: query
        name: year
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.DeviceDefinition'
      tags:
      - device-definitions
  /device-definitions/:id:
    get:
      description: gets a specific device definition by id, adds autopi integration
        on the fly if does not have it and year > cutoff
      parameters:
      - description: device definition id, KSUID format
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.DeviceDefinition'
      tags:
      - device-definitions
  /device-definitions/{id}/integrations:
    get:
      description: gets all the available integrations for a device definition. Includes
        the capabilities of the device with the integration
      parameters:
      - description: device definition id, KSUID format
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.DeviceCompatibility'
            type: array
      tags:
      - device-definitions
  /device-definitions/all:
    get:
      description: returns a json tree of Makes, models, and years
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_controllers.DeviceMMYRoot'
            type: array
      tags:
      - device-definitions
  /documents:
    get:
      consumes:
      - application/json
      description: gets all documents associated with current user - pulled from token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DocumentResponse'
            type: array
      security:
      - BearerAuth: []
      tags:
      - documents
    post:
      consumes:
      - multipart/form-data
      description: post document by id associated with current user - pulled from
        token
      parameters:
      - description: The file to upload. file is required
        in: formData
        name: file
        required: true
        type: file
      - description: The document name. name is required
        in: formData
        name: name
        required: true
        type: string
      - description: The document type. type is required
        in: formData
        name: type
        required: true
        type: string
      - description: The user device ID, optional
        in: formData
        name: userDeviceID
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DocumentResponse'
      security:
      - BearerAuth: []
      tags:
      - documents
  /documents/{id}:
    delete:
      consumes:
      - application/json
      description: delete document associated with current user - pulled from token
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - documents
    get:
      consumes:
      - application/json
      description: get document by id associated with current user - pulled from token
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DocumentResponse'
      security:
      - BearerAuth: []
      tags:
      - documents
  /documents/{id}/download:
    get:
      description: download document associated with current user - pulled from token
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      - image/png
      - image/jpeg
      responses:
        "200":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - documents
  /integrations:
    get:
      description: gets list of integrations we have defined
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Integration'
      security:
      - BearerAuth: []
      tags:
      - integrations
  /nfts/:tokenID:
    get:
      description: retrieves NFT metadata for a given tokenID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.NFTMetadataResp'
        "404":
          description: ""
      tags:
      - nfts
  /nfts/:tokenID/image:
    get:
      description: retrieves NFT metadata for a given tokenID
      produces:
      - image/png
      responses: {}
      tags:
      - nfts
  /user/devices:
    post:
      consumes:
      - application/json
      description: adds a device to a user. can add with only device_definition_id
        or with MMY, which will create a device_definition on the fly
      parameters:
      - description: add device to user. either MMY or id are required
        in: body
        name: user_device
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.RegisterUserDevice'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_controllers.RegisterUserDeviceResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/:userDeviceID/autopi/command:
    post:
      consumes:
      - application/json
      description: Closed off in prod. Submit a raw autopi command to unit. Device
        must be registered with autopi before this can be used
      parameters:
      - description: raw autopi command
        in: body
        name: AutoPiCommandRequest
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.AutoPiCommandRequest'
      responses:
        "200":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - integrations
  /user/devices/:userDeviceID/autopi/command/:jobID:
    get:
      description: gets the status of an autopi raw command by jobID
      parameters:
      - description: job id, from autopi
        in: path
        name: jobID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AutoPiCommandJob'
      security:
      - BearerAuth: []
      tags:
      - integrations
  /user/devices/:userDeviceID/integrations/:integrationID:
    post:
      consumes:
      - application/json
      description: Submit credentials for registering a device with a given integration.
      parameters:
      - description: Integration credentials
        in: body
        name: userDeviceIntegrationRegistration
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.RegisterDeviceIntegrationRequest'
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - integrations
  /user/devices/{userDeviceID}:
    delete:
      description: delete the user device record (hard delete)
      parameters:
      - description: user id
        in: path
        name: userDeviceID
        required: true
        type: string
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/{userDeviceID}/commands/mint:
    get:
      description: Returns the data the user must sign in order to mint this device.
      parameters:
      - description: user device ID
        in: path
        name: userDeviceID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apitypes.TypedData'
      security:
      - BearerAuth: []
      tags:
      - user-devices
    post:
      description: Sends a mint device request to the blockchain
      parameters:
      - description: user device ID
        in: path
        name: userDeviceID
        required: true
        type: string
      - description: Signature and NFT data
        in: body
        name: mintRequest
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.MintRequest'
      responses:
        "200":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/{userDeviceID}/commands/refresh:
    post:
      description: Starts the process of refreshing device status from Smartcar
      parameters:
      - description: user device ID
        in: path
        name: user_device_id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "429":
          description: rate limit hit for integration
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/{userDeviceID}/country_code:
    patch:
      consumes:
      - application/json
      description: updates the CountryCode on the user device record
      parameters:
      - description: Country code
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.UpdateCountryCodeReq'
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/{userDeviceID}/image:
    patch:
      consumes:
      - application/json
      description: updates the ImageUrl on the user device record
      parameters:
      - description: Image URL
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.UpdateImageURLReq'
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/{userDeviceID}/integrations/{integrationID}:
    delete:
      description: Remove an user device's integration
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - integrations
    get:
      description: Receive status updates about a Smartcar integration
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_controllers.GetUserDeviceIntegrationResponse'
      security:
      - BearerAuth: []
      tags:
      - integrations
  /user/devices/{userDeviceID}/integrations/{integrationID}/commands/charge/limit:
    post:
      description: Set the device's charge limit. Currently, this only works for Teslas
        connected through Tesla.
      operationId: set-charge-limit
      parameters:
      - description: Device ID
        in: path
        name: userDeviceID
        required: true
        type: string
      - description: Integration ID
        in: path
        name: integrationID
        required: true
        type: string
      - description: Specify the charge limit
        in: body
        name: chargeLimitRequest
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.ChargeLimitBody'
      produces:
      - application/json
      responses: {}
      summary: Set the device's charge limit.
      tags:
      - device
      - integration
      - command
  /user/devices/{userDeviceID}/integrations/{integrationID}/commands/doors/lock:
    post:
      description: Lock the device's doors.
      operationId: lock-doors
      parameters:
      - description: Device ID
        in: path
        name: userDeviceID
        required: true
        type: string
      - description: Integration ID
        in: path
        name: integrationID
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Lock the device's doors
      tags:
      - device
      - integration
      - command
  /user/devices/{userDeviceID}/integrations/{integrationID}/commands/doors/unlock:
    post:
      description: Unlock the device's doors.
      operationId: unlock-doors
      parameters:
      - description: Device ID
        in: path
        name: userDeviceID
        required: true
        type: string
      - description: Integration ID
        in: path
        name: integrationID
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Unlock the device's doors
      tags:
      - device
      - integration
      - command
  /user/devices/{userDeviceID}/integrations/{integrationID}/commands/frunk/open:
    post:
      description: Open the device's front trunk. Currently, this only works for Teslas
        connected through Tesla.
      operationId: open-frunk
      parameters:
      - description: Device ID
        in: path
        name: userDeviceID
        required: true
        type: string
      - description: Integration ID
        in: path
        name: integrationID
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Open the device's front trunk
      tags:
      - device
      - integration
      - command
  /user/devices/{userDeviceID}/integrations/{integrationID}/commands/trunk/open:
    post:
      description: Open the device's front trunk. Currently, this only works for Teslas
        connected through Tesla.
      operationId: open-trunk
      parameters:
      - description: Device ID
        in: path
        name: userDeviceID
        required: true
        type: string
      - description: Integration ID
        in: path
        name: integrationID
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Open the device's rear trunk
      tags:
      - device
      - integration
      - command
  /user/devices/{userDeviceID}/name:
    patch:
      consumes:
      - application/json
      description: updates the Name on the user device record
      parameters:
      - description: Name
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.UpdateNameReq'
      - description: user id
        in: path
        name: user_device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/{userDeviceID}/status:
    get:
      description: |-
        Returns the latest status update for the device. May return 404 if the
        user does not have a device with the ID, or if no status updates have come
      parameters:
      - description: user device ID
        in: path
        name: user_device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DeviceSnapshot'
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/{userDeviceID}/vin:
    patch:
      consumes:
      - application/json
      description: updates the VIN on the user device record
      parameters:
      - description: VIN
        in: body
        name: vin
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.UpdateVINReq'
      - description: user id
        in: path
        name: userDeviceID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/me:
    get:
      description: gets all devices associated with current user - pulled from token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_controllers.UserDeviceFull'
            type: array
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/geofences:
    get:
      description: gets all geofences for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.GetGeofence'
            type: array
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - geofence
    post:
      consumes:
      - application/json
      description: adds a new geofence to the user's account, optionally attached
        to specific user_devices
      parameters:
      - description: add geofence to user.
        in: body
        name: geofence
        required: true
        schema:
          $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.CreateGeofence'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.CreateResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - geofence
  /user/geofences/{geofenceID}:
    delete:
      description: hard deletes a geofence from db
      parameters:
      - description: geofence id
        in: path
        name: geofenceID
        required: true
        type: string
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - geofence
    put:
      consumes:
      - application/json
      description: updates an existing geofence for the current user
      parameters:
      - description: geofence id
        in: path
        name: geofenceID
        required: true
        type: string
      - description: add geofence to user.
        in: body
        name: geofence
        required: true
        schema:
          $ref: '#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.CreateGeofence'
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - geofence
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
