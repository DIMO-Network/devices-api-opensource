basePath: /v1
definitions:
  controllers.CreateGeofence:
    properties:
      UserDeviceIds:
        description: Optionally link the geofence with a list of user device Id
        items:
          type: string
        type: array
      h3Indexes:
        description: 'required: true'
        items:
          type: string
        type: array
      name:
        description: 'required: true'
        type: string
      type:
        description: |-
          one of following: "PrivacyFence", "TriggerEntry", "TriggerExit"
          required: true
        type: string
    type: object
  controllers.CreateResponse:
    properties:
      id:
        type: string
    type: object
  controllers.DeviceMMYRoot:
    properties:
      make:
        type: string
      models:
        items:
          $ref: '#/definitions/controllers.DeviceModels'
        type: array
    type: object
  controllers.DeviceModelYear:
    properties:
      id:
        type: string
      year:
        type: integer
    type: object
  controllers.DeviceModels:
    properties:
      model:
        type: string
      years:
        items:
          $ref: '#/definitions/controllers.DeviceModelYear'
        type: array
    type: object
  controllers.GeoFenceUserDevice:
    properties:
      mmy:
        type: string
      name:
        type: string
      userDeviceId:
        type: string
    type: object
  controllers.GetGeofence:
    properties:
      h3Indexes:
        items:
          type: string
        type: array
      id:
        type: string
      name:
        type: string
      type:
        type: string
      userDevices:
        items:
          $ref: '#/definitions/controllers.GeoFenceUserDevice'
        type: array
    type: object
  controllers.GetUserDeviceIntegrationResponse:
    properties:
      externalId:
        description: |-
          ExternalID is the identifier used by the third party for the device. It may be absent if we
          haven't authorized yet.
        type: string
      status:
        description: Status is one of "Pending", "PendingFirstData", "Active"
        type: string
    type: object
  controllers.RegisterSmartcarRequest:
    properties:
      code:
        type: string
      redirectURI:
        type: string
    type: object
  controllers.RegisterUserDevice:
    properties:
      countryCode:
        type: string
      deviceDefinitionId:
        type: string
      make:
        type: string
      model:
        type: string
      year:
        type: integer
    type: object
  controllers.RegisterUserDeviceResponse:
    properties:
      deviceDefinitionId:
        type: string
      integrationCapabilities:
        items:
          $ref: '#/definitions/services.DeviceCompatibility'
        type: array
      userDeviceId:
        type: string
    type: object
  controllers.UpdateCountryCodeReq:
    properties:
      countryCode:
        type: string
    type: object
  controllers.UpdateNameReq:
    properties:
      name:
        type: string
    type: object
  controllers.UpdateVINReq:
    properties:
      vin:
        type: string
    type: object
  controllers.UserDeviceFull:
    properties:
      countryCode:
        type: string
      customImageUrl:
        type: string
      deviceDefinition:
        $ref: '#/definitions/services.DeviceDefinition'
      id:
        type: string
      integrations:
        items:
          $ref: '#/definitions/controllers.UserDeviceIntegrationStatus'
        type: array
      name:
        type: string
      vin:
        type: string
      vinConfirmed:
        type: boolean
    type: object
  controllers.UserDeviceIntegrationStatus:
    properties:
      integrationId:
        type: string
      status:
        type: string
    type: object
  services.DeviceCompatibility:
    properties:
      capabilities:
        type: string
      country:
        type: string
      id:
        type: string
      style:
        type: string
      type:
        type: string
      vendor:
        type: string
    type: object
  services.DeviceDefinition:
    properties:
      compatibleIntegrations:
        description: CompatibleIntegrations has systems this vehicle can integrate
          with
        items:
          $ref: '#/definitions/services.DeviceCompatibility'
        type: array
      deviceDefinitionId:
        type: string
      imageUrl:
        type: string
      metadata: {}
      name:
        type: string
      type:
        $ref: '#/definitions/services.DeviceType'
      vehicleData:
        $ref: '#/definitions/services.DeviceVehicleInfo'
        description: VehicleInfo will be empty if not a vehicle type
      verified:
        type: boolean
    type: object
  services.DeviceType:
    properties:
      make:
        type: string
      model:
        type: string
      subModels:
        items:
          type: string
        type: array
      type:
        description: Type is eg. Vehicle, E-bike, roomba
        type: string
      year:
        type: integer
    type: object
  services.DeviceVehicleInfo:
    properties:
      base_msrp:
        type: integer
      driven_wheels:
        type: string
      epa_class:
        type: string
      fuel_type:
        type: string
      mpg_city:
        type: string
      mpg_highway:
        type: string
      number_of_doors:
        type: string
      vehicle_type:
        description: VehicleType PASSENGER CAR, from NHTSA
        type: string
    type: object
info:
  contact: {}
  title: DIMO Devices API
  version: "2.0"
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - root
  /device-definitions:
    get:
      description: gets a specific device definition by make model and year
      parameters:
      - description: make eg TESLA
        in: query
        name: make
        required: true
        type: string
      - description: model eg MODEL Y
        in: query
        name: model
        required: true
        type: string
      - description: year eg 2021
        in: query
        name: year
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.DeviceDefinition'
      tags:
      - device-definitions
  /device-definitions/{id}:
    get:
      description: gets a specific device definition by id
      parameters:
      - description: device definition id, KSUID format
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.DeviceDefinition'
      tags:
      - device-definitions
  /device-definitions/{id}/integrations:
    get:
      description: gets all the available integrations for a device definition. Includes
        the capabilities of the device with the integration
      parameters:
      - description: device definition id, KSUID format
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.DeviceCompatibility'
            type: array
      tags:
      - device-definitions
  /device-definitions/all:
    get:
      description: returns a json tree of Makes, models, and years
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.DeviceMMYRoot'
            type: array
      tags:
      - device-definitions
  /user/devices:
    post:
      consumes:
      - application/json
      description: adds a device to a user. can add with only device_definition_id
        or with MMY, which will create a device_definition on the fly
      parameters:
      - description: add device to user. either MMY or id are required
        in: body
        name: user_device
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterUserDevice'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.RegisterUserDeviceResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/:userDeviceID:
    delete:
      description: delete the user device record (hard delete)
      parameters:
      - description: user id
        in: path
        name: userDeviceID
        required: true
        type: string
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/:userDeviceID/commands/refresh:
    post:
      description: Starts the process of refreshing device status from Smartcar
      parameters:
      - description: user device ID
        in: path
        name: user_device_id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "429":
          description: rate limit hit for integration
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/:userDeviceID/country_code:
    patch:
      consumes:
      - application/json
      description: updates the CountryCode on the user device record
      parameters:
      - description: Country code
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateCountryCodeReq'
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/:userDeviceID/integrations/:integrationID:
    delete:
      description: Remove an user device's integration
      responses:
        "204":
          description: ""
      tags:
      - user-devices
    get:
      description: Receive status updates about a Smartcar integration
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetUserDeviceIntegrationResponse'
      tags:
      - user-devices
    post:
      consumes:
      - application/json
      description: |-
        Use a Smartcar auth code to connect to Smartcar and obtain access and refresh
        tokens for use by the app.
      parameters:
      - description: Authorization code from Smartcar
        in: body
        name: userDeviceIntegrationRegistration
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterSmartcarRequest'
      responses:
        "204":
          description: ""
      tags:
      - user-devices
  /user/devices/:userDeviceID/name:
    patch:
      consumes:
      - application/json
      description: updates the Name on the user device record
      parameters:
      - description: Name
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateNameReq'
      - description: user id
        in: path
        name: user_device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/:userDeviceID/status:
    get:
      description: |-
        Returns the latest status update for the device. May return 404 if the
        user does not have a device with the ID, or if no status updates have come
      parameters:
      - description: user device ID
        in: path
        name: user_device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/:userDeviceID/vin:
    patch:
      consumes:
      - application/json
      description: updates the VIN on the user device record
      parameters:
      - description: VIN
        in: body
        name: vin
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateVINReq'
      - description: user id
        in: path
        name: userDeviceID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/devices/me:
    get:
      description: gets all devices associated with current user - pulled from token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.UserDeviceFull'
            type: array
      security:
      - BearerAuth: []
      tags:
      - user-devices
  /user/geofences:
    get:
      description: gets all geofences for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.GetGeofence'
            type: array
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - geofence
    post:
      consumes:
      - application/json
      description: adds a new geofence to the user's account, optionally attached
        to specific user_devices
      parameters:
      - description: add geofence to user.
        in: body
        name: geofence
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateGeofence'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.CreateResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - geofence
  /user/geofences/:geofenceID:
    delete:
      description: hard deletes a geofence from db
      parameters:
      - description: geofence id
        in: path
        name: geofenceID
        required: true
        type: string
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - geofence
    put:
      consumes:
      - application/json
      description: updates an existing geofence for the current user
      parameters:
      - description: geofence id
        in: path
        name: geofenceID
        required: true
        type: string
      - description: add geofence to user.
        in: body
        name: geofence
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateGeofence'
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      tags:
      - geofence
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
