{
    "swagger": "2.0",
    "info": {
        "title": "DIMO Devices API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/v1",
    "paths": {
        "/autopi/task/:taskID": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets the status of an autopi related task. In future could be other tasks too?",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "task id",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AutoPiTask"
                        }
                    }
                }
            }
        },
        "/autopi/unit/:unitID": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets the information about the autopi by the unitId",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "autopi unit id",
                        "name": "unitID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.AutoPiDeviceInfo"
                        }
                    }
                }
            }
        },
        "/autopi/unit/:unitID/commands/claim": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return the EIP-712 payload to be signed for AutoPi device claiming.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "AutoPi unit id",
                        "name": "unitID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apitypes.TypedData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return the EIP-712 payload to be signed for AutoPi device claiming.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "AutoPi unit id",
                        "name": "unitID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signatures from the user and AutoPi",
                        "name": "claimRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.AutoPiClaimRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/autopi/unit/:unitID/is-online": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets whether the autopi is online right now, if already paired with a user, makes sure user has access. returns json with {\"online\": true/false}",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "autopi unit id",
                        "name": "unitID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/autopi/unit/:unitID/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "checks to see if autopi unit needs to be updated, and starts update process if so.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "autopi unit id",
                        "name": "unitID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AutoPiTask"
                        }
                    }
                }
            }
        },
        "/device-definitions": {
            "get": {
                "description": "gets a specific device definition by make model and year",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-definitions"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "make eg TESLA",
                        "name": "make",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "model eg MODEL Y",
                        "name": "model",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "year eg 2021",
                        "name": "year",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.DeviceDefinition"
                        }
                    }
                }
            }
        },
        "/device-definitions/:id": {
            "get": {
                "description": "gets a specific device definition by id, adds autopi integration on the fly if does not have it and year \u003e cutoff",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-definitions"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "device definition id, KSUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.DeviceDefinition"
                        }
                    }
                }
            }
        },
        "/device-definitions/all": {
            "get": {
                "description": "returns a json tree of Makes, models, and years",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-definitions"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DeviceMMYRoot"
                            }
                        }
                    }
                }
            }
        },
        "/device-definitions/{id}/integrations": {
            "get": {
                "description": "gets all the available integrations for a device definition. Includes the capabilities of the device with the integration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-definitions"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "device definition id, KSUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.DeviceCompatibility"
                            }
                        }
                    }
                }
            }
        },
        "/documents": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets all documents associated with current user - pulled from token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers.DocumentResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "post document by id associated with current user - pulled from token",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "type": "file",
                        "description": "The file to upload. file is required",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The document name. name is required",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The document type. type is required",
                        "name": "type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The user device ID, optional",
                        "name": "userDeviceID",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DocumentResponse"
                        }
                    }
                }
            }
        },
        "/documents/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get document by id associated with current user - pulled from token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DocumentResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "delete document associated with current user - pulled from token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/documents/{id}/download": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "download document associated with current user - pulled from token",
                "produces": [
                    "application/octet-stream",
                    "image/png",
                    "image/jpeg"
                ],
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/integrations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets list of integrations we have defined",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Integration"
                        }
                    }
                }
            }
        },
        "/nfts/:tokenID/image": {
            "get": {
                "description": "retrieves NFT metadata for a given tokenID",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "nfts"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "NFT token ID",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "If true, remove the background in the PNG. Defaults to false.",
                        "name": "transparent",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/nfts/{tokenID}": {
            "get": {
                "description": "retrieves NFT metadata for a given tokenID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nfts"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "NFT token ID",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.NFTMetadataResp"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/user/devices": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "adds a device to a user. can add with only device_definition_id or with MMY, which will create a device_definition on the fly",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "add device to user. either MMY or id are required",
                        "name": "user_device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.RegisterUserDevice"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.RegisterUserDeviceResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/:userDeviceID/autopi/command": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Closed off in prod. Submit a raw autopi command to unit. Device must be registered with autopi before this can be used",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "description": "raw autopi command",
                        "name": "AutoPiCommandRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.AutoPiCommandRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/devices/:userDeviceID/autopi/command/:jobID": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets the status of an autopi raw command by jobID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "job id, from autopi",
                        "name": "jobID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AutoPiCommandJob"
                        }
                    }
                }
            }
        },
        "/user/devices/:userDeviceID/integrations/:integrationID": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submit credentials for registering a device with a given integration.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "description": "Integration credentials",
                        "name": "userDeviceIntegrationRegistration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.RegisterDeviceIntegrationRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets all devices associated with current user - pulled from token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers.UserDeviceFull"
                            }
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "delete the user device record (hard delete)",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/commands/mint": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the data the user must sign in order to mint this device.",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apitypes.TypedData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a mint device request to the blockchain",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signature and NFT data",
                        "name": "mintRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.MintRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/commands/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts the process of refreshing device status from Smartcar",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device ID",
                        "name": "user_device_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "429": {
                        "description": "rate limit hit for integration"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/country_code": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the CountryCode on the user device record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "Country code",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UpdateCountryCodeReq"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/image": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the ImageUrl on the user device record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "Image URL",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UpdateImageURLReq"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Receive status updates about a Smartcar integration",
                "tags": [
                    "integrations"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.GetUserDeviceIntegrationResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove an user device's integration",
                "tags": [
                    "integrations"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/doors/lock": {
            "post": {
                "description": "Lock the device's doors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Lock the device's doors",
                "operationId": "lock-doors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/doors/unlock": {
            "post": {
                "description": "Unlock the device's doors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Unlock the device's doors",
                "operationId": "unlock-doors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/frunk/open": {
            "post": {
                "description": "Open the device's front trunk. Currently, this only works for Teslas connected through Tesla.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Open the device's front trunk",
                "operationId": "open-frunk",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/trunk/open": {
            "post": {
                "description": "Open the device's front trunk. Currently, this only works for Teslas connected through Tesla.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Open the device's rear trunk",
                "operationId": "open-trunk",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/{requestID}": {
            "get": {
                "description": "Get the status of a submitted command by request id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Get the status of a submitted command.",
                "operationId": "get-command-request-status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Command request ID",
                        "name": "requestID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandRequestStatusResp"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/name": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the Name on the user device record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "Name",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UpdateNameReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "user_device_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the latest status update for the device. May return 404 if the\nuser does not have a device with the ID, or if no status updates have come",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device ID",
                        "name": "user_device_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DeviceSnapshot"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/valuations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets valuations for a particular user device",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DeviceValuation"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/vin": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the VIN on the user device record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "VIN",
                        "name": "vin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UpdateVINReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/geofences": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets all geofences for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "geofence"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers.GetGeofence"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "adds a new geofence to the user's account, optionally attached to specific user_devices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "geofence"
                ],
                "parameters": [
                    {
                        "description": "add geofence to user.",
                        "name": "geofence",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CreateGeofence"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CreateResponse"
                        }
                    }
                }
            }
        },
        "/user/geofences/{geofenceID}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates an existing geofence for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "geofence"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "geofence id",
                        "name": "geofenceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "add geofence to user.",
                        "name": "geofence",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CreateGeofence"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "hard deletes a geofence from db",
                "tags": [
                    "geofence"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "geofence id",
                        "name": "geofenceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        }
    },
    "definitions": {
        "apitypes.Type": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apitypes.TypedData": {
            "type": "object",
            "properties": {
                "domain": {
                    "$ref": "#/definitions/apitypes.TypedDataDomain"
                },
                "message": {
                    "$ref": "#/definitions/apitypes.TypedDataMessage"
                },
                "primaryType": {
                    "type": "string"
                },
                "types": {
                    "$ref": "#/definitions/apitypes.Types"
                }
            }
        },
        "apitypes.TypedDataDomain": {
            "type": "object",
            "properties": {
                "chainId": {
                    "$ref": "#/definitions/math.HexOrDecimal256"
                },
                "name": {
                    "type": "string"
                },
                "salt": {
                    "type": "string"
                },
                "verifyingContract": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "apitypes.TypedDataMessage": {
            "type": "object",
            "additionalProperties": true
        },
        "apitypes.Types": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/apitypes.Type"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.AutoPiClaimRequest": {
            "type": "object",
            "properties": {
                "aftermarketDeviceSignature": {
                    "description": "AftermarketDeviceSignature is the signature from the aftermarket device.",
                    "type": "string"
                },
                "userSignature": {
                    "description": "UserSignature is the signature from the user, using their private key.",
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.AutoPiCommandRequest": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.AutoPiDeviceInfo": {
            "type": "object",
            "properties": {
                "deviceId": {
                    "type": "string"
                },
                "dockerReleases": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "hwRevision": {
                    "type": "string"
                },
                "isUpdated": {
                    "type": "boolean"
                },
                "lastCommunication": {
                    "type": "string"
                },
                "releaseVersion": {
                    "type": "string"
                },
                "shouldUpdate": {
                    "type": "boolean"
                },
                "template": {
                    "type": "integer"
                },
                "unitId": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.CommandRequestStatusResp": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string",
                    "example": "doors/unlock"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-08-09T19:38:39Z"
                },
                "id": {
                    "type": "string",
                    "example": "2D8LqUHQtaMHH6LYPqznmJMBeZm"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Complete",
                        "Failed"
                    ],
                    "example": "Complete"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-08-09T19:39:22Z"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.CommandResponse": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.ConditionValuation": {
            "type": "object",
            "properties": {
                "mileage": {
                    "type": "integer"
                },
                "retail": {
                    "description": "Retail uses RetailAverage when available",
                    "type": "integer"
                },
                "retailAverage": {
                    "type": "integer"
                },
                "retailClean": {
                    "type": "integer"
                },
                "retailRough": {
                    "type": "integer"
                },
                "retailSource": {
                    "type": "string"
                },
                "tradeIn": {
                    "description": "TradeIn uses TradeInAverage when available",
                    "type": "integer"
                },
                "tradeInAverage": {
                    "type": "integer"
                },
                "tradeInClean": {
                    "type": "integer"
                },
                "tradeInRough": {
                    "type": "integer"
                },
                "tradeInSource": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.CreateGeofence": {
            "type": "object",
            "properties": {
                "h3Indexes": {
                    "description": "required: false",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "required: true",
                    "type": "string"
                },
                "type": {
                    "description": "one of following: \"PrivacyFence\", \"TriggerEntry\", \"TriggerExit\"\nrequired: true",
                    "type": "string"
                },
                "userDeviceIds": {
                    "description": "Optionally link the geofence with a list of user device ID",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.CreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.DeviceMMYRoot": {
            "type": "object",
            "properties": {
                "make": {
                    "type": "string"
                },
                "models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DeviceModels"
                    }
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.DeviceModelYear": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.DeviceModels": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string"
                },
                "years": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.DeviceModelYear"
                    }
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.DeviceSnapshot": {
            "type": "object",
            "properties": {
                "batteryCapacity": {
                    "type": "integer"
                },
                "chargeLimit": {
                    "type": "number"
                },
                "charging": {
                    "type": "boolean"
                },
                "fuelPercentRemaining": {
                    "type": "number"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "odometer": {
                    "type": "number"
                },
                "oil": {
                    "type": "number"
                },
                "range": {
                    "type": "number"
                },
                "recordCreatedAt": {
                    "type": "string"
                },
                "recordUpdatedAt": {
                    "type": "string"
                },
                "soc": {
                    "description": "todo: change json to match after update frontend",
                    "type": "number"
                },
                "tirePressure": {
                    "$ref": "#/definitions/smartcar.TirePressure"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.DeviceValuation": {
            "type": "object",
            "properties": {
                "blackbook": {
                    "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.ConditionValuation"
                },
                "drivly": {
                    "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.ConditionValuation"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.DocumentResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "ext": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.GeoFenceUserDevice": {
            "type": "object",
            "properties": {
                "mmy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.GetGeofence": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "h3Indexes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.GeoFenceUserDevice"
                    }
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.GetUserDeviceIntegrationResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the creation time of this integration for this device.",
                    "type": "string"
                },
                "externalId": {
                    "description": "ExternalID is the identifier used by the third party for the device. It may be absent if we\nhaven't authorized yet.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is one of \"Pending\", \"PendingFirstData\", \"Active\", \"Failed\", \"DuplicateIntegration\".",
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.MintRequest": {
            "type": "object",
            "properties": {
                "imageData": {
                    "description": "ImageData contains the base64-encoded NFT PNG image.",
                    "type": "string"
                },
                "imageDataTransparent": {
                    "description": "ImageDataTransparent contains the base64-encoded NFT PNG image\nwith a transparent background, for use in the app.",
                    "type": "string"
                },
                "signature": {
                    "description": "Signature is the hex encoding of the EIP-712 signature result.",
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.NFTAttribute": {
            "type": "object",
            "properties": {
                "trait_type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.NFTData": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status is the minting status of the NFT.",
                    "type": "string",
                    "enum": [
                        "Unstarted",
                        "Submitted",
                        "Mined",
                        "Confirmed"
                    ],
                    "example": "Confirmed"
                },
                "tokenId": {
                    "type": "number",
                    "example": 37
                },
                "tokenUri": {
                    "type": "string",
                    "example": "https://nft.dimo.zone/37"
                },
                "txHash": {
                    "description": "TxHash is the hash of the minting transaction.",
                    "type": "string",
                    "example": "0x30bce3da6985897224b29a0fe064fd2b426bb85a394cc09efe823b5c83326a8e"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.NFTMetadataResp": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.NFTAttribute"
                    }
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.RegisterDeviceIntegrationRequest": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "code": {
                    "description": "Code is an OAuth authorization code. Not used in all integrations.",
                    "type": "string"
                },
                "expiresIn": {
                    "type": "integer"
                },
                "externalId": {
                    "description": "ExternalID is the only field needed for AutoPi registrations. It is the UnitID.",
                    "type": "string"
                },
                "redirectURI": {
                    "description": "RedirectURI is the OAuth redirect URI used by the frontend. Not used in all integrations.",
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.RegisterUserDevice": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                },
                "deviceDefinitionId": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.RegisterUserDeviceResponse": {
            "type": "object",
            "properties": {
                "deviceDefinitionId": {
                    "type": "string"
                },
                "integrationCapabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.DeviceCompatibility"
                    }
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.UpdateCountryCodeReq": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.UpdateImageURLReq": {
            "type": "object",
            "properties": {
                "imageUrl": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.UpdateNameReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.UpdateVINReq": {
            "type": "object",
            "properties": {
                "vin": {
                    "type": "string"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.UserDeviceFull": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                },
                "customImageUrl": {
                    "type": "string"
                },
                "deviceDefinition": {
                    "$ref": "#/definitions/services.DeviceDefinition"
                },
                "id": {
                    "type": "string"
                },
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.UserDeviceIntegrationStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/services.UserDeviceMetadata"
                },
                "name": {
                    "type": "string"
                },
                "nft": {
                    "$ref": "#/definitions/github.com_DIMO-Network_devices-api_internal_controllers.NFTData"
                },
                "vin": {
                    "type": "string"
                },
                "vinConfirmed": {
                    "type": "boolean"
                }
            }
        },
        "github.com_DIMO-Network_devices-api_internal_controllers.UserDeviceIntegrationStatus": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "integrationId": {
                    "type": "string"
                },
                "integrationVendor": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.AutoPiClaimRequest": {
            "type": "object",
            "properties": {
                "aftermarketDeviceSignature": {
                    "description": "AftermarketDeviceSignature is the signature from the aftermarket device.",
                    "type": "string"
                },
                "userSignature": {
                    "description": "UserSignature is the signature from the user, using their private key.",
                    "type": "string"
                }
            }
        },
        "internal_controllers.AutoPiCommandRequest": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.AutoPiDeviceInfo": {
            "type": "object",
            "properties": {
                "deviceId": {
                    "type": "string"
                },
                "dockerReleases": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "hwRevision": {
                    "type": "string"
                },
                "isUpdated": {
                    "type": "boolean"
                },
                "lastCommunication": {
                    "type": "string"
                },
                "releaseVersion": {
                    "type": "string"
                },
                "shouldUpdate": {
                    "type": "boolean"
                },
                "template": {
                    "type": "integer"
                },
                "unitId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.CommandRequestStatusResp": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string",
                    "example": "doors/unlock"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-08-09T19:38:39Z"
                },
                "id": {
                    "type": "string",
                    "example": "2D8LqUHQtaMHH6LYPqznmJMBeZm"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Complete",
                        "Failed"
                    ],
                    "example": "Complete"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-08-09T19:39:22Z"
                }
            }
        },
        "internal_controllers.CommandResponse": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.ConditionValuation": {
            "type": "object",
            "properties": {
                "mileage": {
                    "type": "integer"
                },
                "retail": {
                    "description": "Retail uses RetailAverage when available",
                    "type": "integer"
                },
                "retailAverage": {
                    "type": "integer"
                },
                "retailClean": {
                    "type": "integer"
                },
                "retailRough": {
                    "type": "integer"
                },
                "retailSource": {
                    "type": "string"
                },
                "tradeIn": {
                    "description": "TradeIn uses TradeInAverage when available",
                    "type": "integer"
                },
                "tradeInAverage": {
                    "type": "integer"
                },
                "tradeInClean": {
                    "type": "integer"
                },
                "tradeInRough": {
                    "type": "integer"
                },
                "tradeInSource": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.CreateGeofence": {
            "type": "object",
            "properties": {
                "h3Indexes": {
                    "description": "required: false",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "required: true",
                    "type": "string"
                },
                "type": {
                    "description": "one of following: \"PrivacyFence\", \"TriggerEntry\", \"TriggerExit\"\nrequired: true",
                    "type": "string"
                },
                "userDeviceIds": {
                    "description": "Optionally link the geofence with a list of user device ID",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "internal_controllers.CreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.DeviceMMYRoot": {
            "type": "object",
            "properties": {
                "make": {
                    "type": "string"
                },
                "models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.DeviceModels"
                    }
                }
            }
        },
        "internal_controllers.DeviceModelYear": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "internal_controllers.DeviceModels": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string"
                },
                "years": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.DeviceModelYear"
                    }
                }
            }
        },
        "internal_controllers.DeviceSnapshot": {
            "type": "object",
            "properties": {
                "batteryCapacity": {
                    "type": "integer"
                },
                "chargeLimit": {
                    "type": "number"
                },
                "charging": {
                    "type": "boolean"
                },
                "fuelPercentRemaining": {
                    "type": "number"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "odometer": {
                    "type": "number"
                },
                "oil": {
                    "type": "number"
                },
                "range": {
                    "type": "number"
                },
                "recordCreatedAt": {
                    "type": "string"
                },
                "recordUpdatedAt": {
                    "type": "string"
                },
                "soc": {
                    "description": "todo: change json to match after update frontend",
                    "type": "number"
                },
                "tirePressure": {
                    "$ref": "#/definitions/smartcar.TirePressure"
                }
            }
        },
        "internal_controllers.DeviceValuation": {
            "type": "object",
            "properties": {
                "blackbook": {
                    "$ref": "#/definitions/internal_controllers.ConditionValuation"
                },
                "drivly": {
                    "$ref": "#/definitions/internal_controllers.ConditionValuation"
                }
            }
        },
        "internal_controllers.DocumentResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "ext": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.GeoFenceUserDevice": {
            "type": "object",
            "properties": {
                "mmy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.GetGeofence": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "h3Indexes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.GeoFenceUserDevice"
                    }
                }
            }
        },
        "internal_controllers.GetUserDeviceIntegrationResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the creation time of this integration for this device.",
                    "type": "string"
                },
                "externalId": {
                    "description": "ExternalID is the identifier used by the third party for the device. It may be absent if we\nhaven't authorized yet.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is one of \"Pending\", \"PendingFirstData\", \"Active\", \"Failed\", \"DuplicateIntegration\".",
                    "type": "string"
                }
            }
        },
        "internal_controllers.MintRequest": {
            "type": "object",
            "properties": {
                "imageData": {
                    "description": "ImageData contains the base64-encoded NFT PNG image.",
                    "type": "string"
                },
                "imageDataTransparent": {
                    "description": "ImageDataTransparent contains the base64-encoded NFT PNG image\nwith a transparent background, for use in the app.",
                    "type": "string"
                },
                "signature": {
                    "description": "Signature is the hex encoding of the EIP-712 signature result.",
                    "type": "string"
                }
            }
        },
        "internal_controllers.NFTAttribute": {
            "type": "object",
            "properties": {
                "trait_type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.NFTData": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status is the minting status of the NFT.",
                    "type": "string",
                    "enum": [
                        "Unstarted",
                        "Submitted",
                        "Mined",
                        "Confirmed"
                    ],
                    "example": "Confirmed"
                },
                "tokenId": {
                    "type": "number",
                    "example": 37
                },
                "tokenUri": {
                    "type": "string",
                    "example": "https://nft.dimo.zone/37"
                },
                "txHash": {
                    "description": "TxHash is the hash of the minting transaction.",
                    "type": "string",
                    "example": "0x30bce3da6985897224b29a0fe064fd2b426bb85a394cc09efe823b5c83326a8e"
                }
            }
        },
        "internal_controllers.NFTMetadataResp": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.NFTAttribute"
                    }
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.RegisterDeviceIntegrationRequest": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "code": {
                    "description": "Code is an OAuth authorization code. Not used in all integrations.",
                    "type": "string"
                },
                "expiresIn": {
                    "type": "integer"
                },
                "externalId": {
                    "description": "ExternalID is the only field needed for AutoPi registrations. It is the UnitID.",
                    "type": "string"
                },
                "redirectURI": {
                    "description": "RedirectURI is the OAuth redirect URI used by the frontend. Not used in all integrations.",
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.RegisterUserDevice": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                },
                "deviceDefinitionId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.RegisterUserDeviceResponse": {
            "type": "object",
            "properties": {
                "deviceDefinitionId": {
                    "type": "string"
                },
                "integrationCapabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.DeviceCompatibility"
                    }
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.UpdateCountryCodeReq": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.UpdateImageURLReq": {
            "type": "object",
            "properties": {
                "imageUrl": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.UpdateNameReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.UpdateVINReq": {
            "type": "object",
            "properties": {
                "vin": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.UserDeviceFull": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                },
                "customImageUrl": {
                    "type": "string"
                },
                "deviceDefinition": {
                    "$ref": "#/definitions/services.DeviceDefinition"
                },
                "id": {
                    "type": "string"
                },
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.UserDeviceIntegrationStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/services.UserDeviceMetadata"
                },
                "name": {
                    "type": "string"
                },
                "nft": {
                    "$ref": "#/definitions/internal_controllers.NFTData"
                },
                "vin": {
                    "type": "string"
                },
                "vinConfirmed": {
                    "type": "boolean"
                }
            }
        },
        "internal_controllers.UserDeviceIntegrationStatus": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "integrationId": {
                    "type": "string"
                },
                "integrationVendor": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "math.HexOrDecimal256": {
            "type": "object"
        },
        "models.Integration": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/null.JSON"
                },
                "refresh_limit_secs": {
                    "description": "How often can integration be called in seconds",
                    "type": "integer"
                },
                "style": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "null.JSON": {
            "type": "object",
            "properties": {
                "json": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "null.String": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "services.AutoPiCommandJob": {
            "type": "object",
            "properties": {
                "commandJobId": {
                    "type": "string"
                },
                "commandRaw": {
                    "type": "string"
                },
                "commandState": {
                    "type": "string"
                },
                "lastUpdated": {
                    "type": "string"
                }
            }
        },
        "services.AutoPiTask": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taskId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "updates": {
                    "description": "Updates increments every time the job was updated.",
                    "type": "integer"
                }
            }
        },
        "services.DeviceCompatibility": {
            "type": "object",
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "country": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "style": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "services.DeviceDefinition": {
            "type": "object",
            "properties": {
                "compatibleIntegrations": {
                    "description": "CompatibleIntegrations has systems this vehicle can integrate with",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.DeviceCompatibility"
                    }
                },
                "deviceDefinitionId": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "make": {
                    "$ref": "#/definitions/services.DeviceMake"
                },
                "metadata": {},
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/services.DeviceType"
                },
                "vehicleData": {
                    "description": "VehicleInfo will be empty if not a vehicle type",
                    "$ref": "#/definitions/services.DeviceVehicleInfo"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "services.DeviceMake": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "logo_url": {
                    "$ref": "#/definitions/null.String"
                },
                "name": {
                    "type": "string"
                },
                "oem_platform_name": {
                    "$ref": "#/definitions/null.String"
                }
            }
        },
        "services.DeviceType": {
            "type": "object",
            "properties": {
                "make": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "subModels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Type is eg. Vehicle, E-bike, roomba",
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "services.DeviceVehicleInfo": {
            "type": "object",
            "properties": {
                "base_msrp": {
                    "type": "integer"
                },
                "driven_wheels": {
                    "type": "string"
                },
                "epa_class": {
                    "type": "string"
                },
                "fuel_tank_capacity_gal": {
                    "type": "string"
                },
                "fuel_type": {
                    "type": "string"
                },
                "mpg": {
                    "type": "string"
                },
                "mpg_city": {
                    "type": "string"
                },
                "mpg_highway": {
                    "type": "string"
                },
                "number_of_doors": {
                    "type": "string"
                },
                "vehicle_type": {
                    "description": "VehicleType PASSENGER CAR, from NHTSA",
                    "type": "string"
                }
            }
        },
        "services.UserDeviceMetadata": {
            "type": "object",
            "properties": {
                "elasticDefinitionSynced": {
                    "type": "boolean"
                },
                "powertrainType": {
                    "type": "string"
                }
            }
        },
        "smartcar.TirePressure": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Deprecated: Should use DataAge instead of Age",
                    "type": "string"
                },
                "backLeft": {
                    "type": "number"
                },
                "backRight": {
                    "type": "number"
                },
                "dataAge": {
                    "type": "string"
                },
                "frontLeft": {
                    "type": "number"
                },
                "frontRight": {
                    "type": "number"
                },
                "requestId": {
                    "type": "string"
                },
                "unitSystem": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}