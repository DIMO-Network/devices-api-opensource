package controllers

import (
	"context"
	"encoding/json"
	"strconv"
	"testing"
	"time"

	"github.com/DIMO-Network/devices-api/internal/config"
	"github.com/DIMO-Network/devices-api/internal/services"
	"github.com/DIMO-Network/devices-api/internal/test"
	"github.com/DIMO-Network/devices-api/models"
	"github.com/gofiber/fiber/v2"
	"github.com/segmentio/ksuid"
	"github.com/stretchr/testify/assert"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

func TestWebhooksController_ProcessCommand(t *testing.T) {
	ctx := context.Background()
	pdb := test.GetDBConnection(ctx)

	token := "BobbyHarry"
	c := NewWebhooksController(&config.Settings{AutoPiAPIToken: token}, pdb.DBS, test.Logger())
	app := fiber.New()
	app.Post(services.AutoPiWebhookPath, c.ProcessCommand)

	t.Run("POST - webhook request 401 with invalid signature", func(t *testing.T) {
		awp := &AutoPiWebhookPayload{
			Jid:      "autoPiJobId", // needs to match db for work
			State:    "COMMAND_EXECUTED",
			Success:  true,
			DeviceID: 11, // must match DB for it to work
		}
		j, _ := json.Marshal(awp)

		request := test.BuildRequest("POST", services.AutoPiWebhookPath, string(j))
		request.Header.Set("X-Request-Signature", "") // copy this from replit python generated value
		response, _ := app.Test(request)
		// assert
		assert.Equal(t, 401, response.StatusCode)
	})
	t.Run("POST - webhook request 400 bad payload", func(t *testing.T) {
		awp := &AutoPiWebhookPayload{
			Success:  true,
			DeviceID: 11, // must match DB for it to work
		}
		j, _ := json.Marshal(awp)

		request := test.BuildRequest("POST", services.AutoPiWebhookPath, string(j))
		request.Header.Set("X-Request-Signature", "e099b777925b0702bb19e41734fc95f5d2dfc0e495d70cc3725fa8e04009cafc") // copy this from replit python generated value
		response, _ := app.Test(request)
		// assert
		assert.Equal(t, 400, response.StatusCode)
	})
	t.Run("POST - webhook request sync command", func(t *testing.T) {
		// arrange
		testUserID := ksuid.New().String()
		autoPiDeviceID := 123123
		autoPiTemplateID := 987
		autoPiJobID := "AD111"
		dm := test.SetupCreateMake(t, "Testla", pdb)
		dd := test.SetupCreateDeviceDefinition(t, dm, "Model X", 2022, pdb)
		integ := test.SetupCreateAutoPiIntegration(t, autoPiTemplateID, pdb)
		ud := test.SetupCreateUserDevice(t, testUserID, dd, pdb)
		test.SetupCreateDeviceIntegration(t, dd, integ, pdb)
		// create user device api integration
		udMetadata := new(services.UserDeviceAPIIntegrationsMetadata)
		udMetadata.AutoPiCommandJobs = append(udMetadata.AutoPiCommandJobs, services.UserDeviceAPIIntegrationJob{
			CommandJobID: autoPiJobID,
			CommandState: "sent",
			CommandRaw:   "state.sls pending",
			LastUpdated:  time.Now().UTC(),
		})
		udiai := models.UserDeviceAPIIntegration{
			UserDeviceID:  ud.ID,
			IntegrationID: integ.ID,
			Status:        models.UserDeviceAPIIntegrationStatusPending,
			ExternalID:    null.StringFrom(strconv.Itoa(autoPiDeviceID)),
		}
		err := udiai.Metadata.Marshal(udMetadata)
		assert.NoError(t, err)
		err = udiai.Insert(ctx, pdb.DBS().Writer, boil.Infer())
		assert.NoError(t, err)

		// act
		awp := &AutoPiWebhookPayload{
			Jid:      autoPiJobID, // needs to match db for work
			State:    "COMMAND_EXECUTED",
			Success:  true,
			DeviceID: autoPiDeviceID, // must match DB for it to work
		}
		j, _ := json.Marshal(awp)

		request := test.BuildRequest("POST", services.AutoPiWebhookPath, string(j))
		// signature generated by python per example code from autopi (for above payload)
		request.Header.Set("X-Request-Signature", "245dd949a5e3fae47b596ad418dab6ac7ed09516eafe95afae1b8080fb5aa0e6")
		response, _ := app.Test(request)
		// assert
		assert.Equal(t, 204, response.StatusCode)
		// check the database has the expected change in status, and `auto_pi_sync_command_state` in metadata
		updatedUdiai, err := models.UserDeviceAPIIntegrations(
			models.UserDeviceAPIIntegrationWhere.UserDeviceID.EQ(ud.ID),
			models.UserDeviceAPIIntegrationWhere.IntegrationID.EQ(integ.ID)).
			One(ctx, pdb.DBS().Writer)
		assert.NoError(t, err)

		assert.Equal(t, models.UserDeviceAPIIntegrationStatusActive, updatedUdiai.Status)

		updatedMetadata := new(services.UserDeviceAPIIntegrationsMetadata)
		err = updatedUdiai.Metadata.Unmarshal(updatedMetadata)
		assert.NoError(t, err)
		assert.Len(t, updatedMetadata.AutoPiCommandJobs, 1)
		assert.Equal(t, awp.State, updatedMetadata.AutoPiCommandJobs[0].CommandState)
		assert.Equal(t, awp.Jid, updatedMetadata.AutoPiCommandJobs[0].CommandJobID)
		assert.NotEqual(t, udMetadata.AutoPiCommandJobs[0].LastUpdated.String(), updatedMetadata.AutoPiCommandJobs[0].LastUpdated.String(),
			"expected updated job to have later time than original job")
		// teardown
		test.TruncateTables(pdb.DBS().Writer.DB, t)
	})
	t.Run("POST - webhook request for non sync raw command", func(t *testing.T) {
		// arrange
		testUserID := ksuid.New().String()
		autoPiDeviceID := 123123
		autoPiTemplateID := 987
		autoPiJobID := "AD111"
		dm := test.SetupCreateMake(t, "Testla", pdb)
		dd := test.SetupCreateDeviceDefinition(t, dm, "Model X", 2022, pdb)
		integ := test.SetupCreateAutoPiIntegration(t, autoPiTemplateID, pdb)
		ud := test.SetupCreateUserDevice(t, testUserID, dd, pdb)
		test.SetupCreateDeviceIntegration(t, dd, integ, pdb)
		// create user device api integration
		udMetadata := new(services.UserDeviceAPIIntegrationsMetadata)
		udMetadata.AutoPiCommandJobs = append(udMetadata.AutoPiCommandJobs, services.UserDeviceAPIIntegrationJob{
			CommandJobID: autoPiJobID,
			CommandState: "sent",
			CommandRaw:   "some raw command",
			LastUpdated:  time.Now().UTC(),
		})
		udiai := models.UserDeviceAPIIntegration{
			UserDeviceID:  ud.ID,
			IntegrationID: integ.ID,
			Status:        models.UserDeviceAPIIntegrationStatusPending, // assert this does not get changed since just raw command
			ExternalID:    null.StringFrom(strconv.Itoa(autoPiDeviceID)),
		}
		err := udiai.Metadata.Marshal(udMetadata)
		assert.NoError(t, err)
		err = udiai.Insert(ctx, pdb.DBS().Writer, boil.Infer())
		assert.NoError(t, err)

		// act
		awp := &AutoPiWebhookPayload{
			Jid:      autoPiJobID, // needs to match db for work
			State:    "COMMAND_EXECUTED",
			Success:  true,
			DeviceID: autoPiDeviceID, // must match DB for it to work
		}
		j, _ := json.Marshal(awp)

		request := test.BuildRequest("POST", services.AutoPiWebhookPath, string(j))
		// signature generated by python per example code from autopi (for above payload)
		request.Header.Set("X-Request-Signature", "245dd949a5e3fae47b596ad418dab6ac7ed09516eafe95afae1b8080fb5aa0e6")
		response, _ := app.Test(request)
		// assert
		assert.Equal(t, 204, response.StatusCode)
		// check the database has the expected change in status, and `auto_pi_sync_command_state` in metadata
		updatedUdiai, err := models.UserDeviceAPIIntegrations(
			models.UserDeviceAPIIntegrationWhere.UserDeviceID.EQ(ud.ID),
			models.UserDeviceAPIIntegrationWhere.IntegrationID.EQ(integ.ID)).
			One(ctx, pdb.DBS().Writer)
		assert.NoError(t, err)

		assert.Equal(t, models.UserDeviceAPIIntegrationStatusPending, updatedUdiai.Status) // this should not change for regular raw commands

		updatedMetadata := new(services.UserDeviceAPIIntegrationsMetadata)
		err = updatedUdiai.Metadata.Unmarshal(updatedMetadata)
		assert.NoError(t, err)
		assert.Len(t, updatedMetadata.AutoPiCommandJobs, 1)
		assert.Equal(t, awp.State, updatedMetadata.AutoPiCommandJobs[0].CommandState)
		assert.Equal(t, awp.Jid, updatedMetadata.AutoPiCommandJobs[0].CommandJobID)
		assert.NotEqual(t, udMetadata.AutoPiCommandJobs[0].LastUpdated.String(), updatedMetadata.AutoPiCommandJobs[0].LastUpdated.String(),
			"expected updated job to have later time than original job")
		// teardown
		test.TruncateTables(pdb.DBS().Writer.DB, t)
	})
}
