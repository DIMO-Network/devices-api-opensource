// Code generated by MockGen. DO NOT EDIT.
// Source: smartcar_client.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	smartcar "github.com/smartcar/go-sdk"
)

// MockSmartcarClient is a mock of SmartcarClient interface.
type MockSmartcarClient struct {
	ctrl     *gomock.Controller
	recorder *MockSmartcarClientMockRecorder
}

// MockSmartcarClientMockRecorder is the mock recorder for MockSmartcarClient.
type MockSmartcarClientMockRecorder struct {
	mock *MockSmartcarClient
}

// NewMockSmartcarClient creates a new mock instance.
func NewMockSmartcarClient(ctrl *gomock.Controller) *MockSmartcarClient {
	mock := &MockSmartcarClient{ctrl: ctrl}
	mock.recorder = &MockSmartcarClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmartcarClient) EXPECT() *MockSmartcarClientMockRecorder {
	return m.recorder
}

// ExchangeCode mocks base method.
func (m *MockSmartcarClient) ExchangeCode(ctx context.Context, code, redirectURI string) (*smartcar.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCode", ctx, code, redirectURI)
	ret0, _ := ret[0].(*smartcar.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCode indicates an expected call of ExchangeCode.
func (mr *MockSmartcarClientMockRecorder) ExchangeCode(ctx, code, redirectURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCode", reflect.TypeOf((*MockSmartcarClient)(nil).ExchangeCode), ctx, code, redirectURI)
}
