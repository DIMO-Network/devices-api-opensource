// Code generated by MockGen. DO NOT EDIT.
// Source: task_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITaskService is a mock of ITaskService interface.
type MockITaskService struct {
	ctrl     *gomock.Controller
	recorder *MockITaskServiceMockRecorder
}

// MockITaskServiceMockRecorder is the mock recorder for MockITaskService.
type MockITaskServiceMockRecorder struct {
	mock *MockITaskService
}

// NewMockITaskService creates a new mock instance.
func NewMockITaskService(ctrl *gomock.Controller) *MockITaskService {
	mock := &MockITaskService{ctrl: ctrl}
	mock.recorder = &MockITaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskService) EXPECT() *MockITaskServiceMockRecorder {
	return m.recorder
}

// StartSmartcarDeregistrationTasks mocks base method.
func (m *MockITaskService) StartSmartcarDeregistrationTasks(userDeviceID, integrationID, externalID, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSmartcarDeregistrationTasks", userDeviceID, integrationID, externalID, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSmartcarDeregistrationTasks indicates an expected call of StartSmartcarDeregistrationTasks.
func (mr *MockITaskServiceMockRecorder) StartSmartcarDeregistrationTasks(userDeviceID, integrationID, externalID, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSmartcarDeregistrationTasks", reflect.TypeOf((*MockITaskService)(nil).StartSmartcarDeregistrationTasks), userDeviceID, integrationID, externalID, accessToken)
}

// StartSmartcarRefresh mocks base method.
func (m *MockITaskService) StartSmartcarRefresh(userDeviceID, integrationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSmartcarRefresh", userDeviceID, integrationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSmartcarRefresh indicates an expected call of StartSmartcarRefresh.
func (mr *MockITaskServiceMockRecorder) StartSmartcarRefresh(userDeviceID, integrationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSmartcarRefresh", reflect.TypeOf((*MockITaskService)(nil).StartSmartcarRefresh), userDeviceID, integrationID)
}

// StartSmartcarRegistrationTasks mocks base method.
func (m *MockITaskService) StartSmartcarRegistrationTasks(userDeviceID, integrationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSmartcarRegistrationTasks", userDeviceID, integrationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSmartcarRegistrationTasks indicates an expected call of StartSmartcarRegistrationTasks.
func (mr *MockITaskServiceMockRecorder) StartSmartcarRegistrationTasks(userDeviceID, integrationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSmartcarRegistrationTasks", reflect.TypeOf((*MockITaskService)(nil).StartSmartcarRegistrationTasks), userDeviceID, integrationID)
}
