// Code generated by MockGen. DO NOT EDIT.
// Source: blackbook_api_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	services "github.com/DIMO-Network/devices-api/internal/services"
	gomock "github.com/golang/mock/gomock"
)

// MockBlackbookAPIService is a mock of BlackbookAPIService interface.
type MockBlackbookAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockBlackbookAPIServiceMockRecorder
}

// MockBlackbookAPIServiceMockRecorder is the mock recorder for MockBlackbookAPIService.
type MockBlackbookAPIServiceMockRecorder struct {
	mock *MockBlackbookAPIService
}

// NewMockBlackbookAPIService creates a new mock instance.
func NewMockBlackbookAPIService(ctrl *gomock.Controller) *MockBlackbookAPIService {
	mock := &MockBlackbookAPIService{ctrl: ctrl}
	mock.recorder = &MockBlackbookAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlackbookAPIService) EXPECT() *MockBlackbookAPIServiceMockRecorder {
	return m.recorder
}

// GetBatch mocks base method.
func (m *MockBlackbookAPIService) GetBatch(vin, state string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", vin, state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch.
func (mr *MockBlackbookAPIServiceMockRecorder) GetBatch(vin, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetBatch), vin, state)
}

// GetColors mocks base method.
func (m *MockBlackbookAPIService) GetColors(uvc string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColors", uvc)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColors indicates an expected call of GetColors.
func (mr *MockBlackbookAPIServiceMockRecorder) GetColors(uvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColors", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetColors), uvc)
}

// GetDrilldown mocks base method.
func (m *MockBlackbookAPIService) GetDrilldown(year int, make, model, series, style, state string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrilldown", year, make, model, series, style, state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrilldown indicates an expected call of GetDrilldown.
func (mr *MockBlackbookAPIServiceMockRecorder) GetDrilldown(year, make, model, series, style, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrilldown", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetDrilldown), year, make, model, series, style, state)
}

// GetLikeVehicles mocks base method.
func (m *MockBlackbookAPIService) GetLikeVehicles(uvc, state string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeVehicles", uvc, state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeVehicles indicates an expected call of GetLikeVehicles.
func (mr *MockBlackbookAPIServiceMockRecorder) GetLikeVehicles(uvc, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeVehicles", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetLikeVehicles), uvc, state)
}

// GetPlate mocks base method.
func (m *MockBlackbookAPIService) GetPlate(plate, state string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlate", plate, state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlate indicates an expected call of GetPlate.
func (mr *MockBlackbookAPIServiceMockRecorder) GetPlate(plate, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlate", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetPlate), plate, state)
}

// GetSummaryByPlate mocks base method.
func (m *MockBlackbookAPIService) GetSummaryByPlate(plate, state string) (*services.BlackbookVINSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaryByPlate", plate, state)
	ret0, _ := ret[0].(*services.BlackbookVINSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaryByPlate indicates an expected call of GetSummaryByPlate.
func (mr *MockBlackbookAPIServiceMockRecorder) GetSummaryByPlate(plate, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaryByPlate", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetSummaryByPlate), plate, state)
}

// GetSummaryByVIN mocks base method.
func (m *MockBlackbookAPIService) GetSummaryByVIN(vin, state string) (*services.BlackbookVINSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaryByVIN", vin, state)
	ret0, _ := ret[0].(*services.BlackbookVINSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaryByVIN indicates an expected call of GetSummaryByVIN.
func (mr *MockBlackbookAPIServiceMockRecorder) GetSummaryByVIN(vin, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaryByVIN", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetSummaryByVIN), vin, state)
}

// GetUVCInfo mocks base method.
func (m *MockBlackbookAPIService) GetUVCInfo(uvc, state string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUVCInfo", uvc, state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUVCInfo indicates an expected call of GetUVCInfo.
func (mr *MockBlackbookAPIServiceMockRecorder) GetUVCInfo(uvc, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUVCInfo", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetUVCInfo), uvc, state)
}

// GetUniversalVINInfo mocks base method.
func (m *MockBlackbookAPIService) GetUniversalVINInfo(vin, state string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniversalVINInfo", vin, state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniversalVINInfo indicates an expected call of GetUniversalVINInfo.
func (mr *MockBlackbookAPIServiceMockRecorder) GetUniversalVINInfo(vin, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniversalVINInfo", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetUniversalVINInfo), vin, state)
}

// GetVINInfo mocks base method.
func (m *MockBlackbookAPIService) GetVINInfo(vin, state string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVINInfo", vin, state)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVINInfo indicates an expected call of GetVINInfo.
func (mr *MockBlackbookAPIServiceMockRecorder) GetVINInfo(vin, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVINInfo", reflect.TypeOf((*MockBlackbookAPIService)(nil).GetVINInfo), vin, state)
}
