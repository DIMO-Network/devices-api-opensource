// Code generated by MockGen. DO NOT EDIT.
// Source: device_definitions_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	grpc "github.com/DIMO-Network/device-definitions-api/pkg/grpc"
	models "github.com/DIMO-Network/devices-api/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockIDeviceDefinitionService is a mock of IDeviceDefinitionService interface.
type MockIDeviceDefinitionService struct {
	ctrl     *gomock.Controller
	recorder *MockIDeviceDefinitionServiceMockRecorder
}

// MockIDeviceDefinitionServiceMockRecorder is the mock recorder for MockIDeviceDefinitionService.
type MockIDeviceDefinitionServiceMockRecorder struct {
	mock *MockIDeviceDefinitionService
}

// NewMockIDeviceDefinitionService creates a new mock instance.
func NewMockIDeviceDefinitionService(ctrl *gomock.Controller) *MockIDeviceDefinitionService {
	mock := &MockIDeviceDefinitionService{ctrl: ctrl}
	mock.recorder = &MockIDeviceDefinitionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeviceDefinitionService) EXPECT() *MockIDeviceDefinitionServiceMockRecorder {
	return m.recorder
}

// CheckAndSetImage mocks base method.
func (m *MockIDeviceDefinitionService) CheckAndSetImage(dd *models.DeviceDefinition, overwrite bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndSetImage", dd, overwrite)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndSetImage indicates an expected call of CheckAndSetImage.
func (mr *MockIDeviceDefinitionServiceMockRecorder) CheckAndSetImage(dd, overwrite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndSetImage", reflect.TypeOf((*MockIDeviceDefinitionService)(nil).CheckAndSetImage), dd, overwrite)
}

// FindDeviceDefinitionByMMY mocks base method.
func (m *MockIDeviceDefinitionService) FindDeviceDefinitionByMMY(ctx context.Context, db boil.ContextExecutor, mk, model string, year int, loadIntegrations bool) (*models.DeviceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeviceDefinitionByMMY", ctx, db, mk, model, year, loadIntegrations)
	ret0, _ := ret[0].(*models.DeviceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeviceDefinitionByMMY indicates an expected call of FindDeviceDefinitionByMMY.
func (mr *MockIDeviceDefinitionServiceMockRecorder) FindDeviceDefinitionByMMY(ctx, db, mk, model, year, loadIntegrations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeviceDefinitionByMMY", reflect.TypeOf((*MockIDeviceDefinitionService)(nil).FindDeviceDefinitionByMMY), ctx, db, mk, model, year, loadIntegrations)
}

// GetDeviceDefinitionsByIDs mocks base method.
func (m *MockIDeviceDefinitionService) GetDeviceDefinitionsByIDs(ctx context.Context, ids []string) (*grpc.GetDeviceDefinitionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitionsByIDs", ctx, ids)
	ret0, _ := ret[0].(*grpc.GetDeviceDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitionsByIDs indicates an expected call of GetDeviceDefinitionsByIDs.
func (mr *MockIDeviceDefinitionServiceMockRecorder) GetDeviceDefinitionsByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitionsByIDs", reflect.TypeOf((*MockIDeviceDefinitionService)(nil).GetDeviceDefinitionsByIDs), ctx, ids)
}

// GetOrCreateMake mocks base method.
func (m *MockIDeviceDefinitionService) GetOrCreateMake(ctx context.Context, tx boil.ContextExecutor, makeName string) (*models.DeviceMake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateMake", ctx, tx, makeName)
	ret0, _ := ret[0].(*models.DeviceMake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateMake indicates an expected call of GetOrCreateMake.
func (mr *MockIDeviceDefinitionServiceMockRecorder) GetOrCreateMake(ctx, tx, makeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateMake", reflect.TypeOf((*MockIDeviceDefinitionService)(nil).GetOrCreateMake), ctx, tx, makeName)
}

// PullBlackbookData mocks base method.
func (m *MockIDeviceDefinitionService) PullBlackbookData(ctx context.Context, userDeviceID, deviceDefinitionID, vin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullBlackbookData", ctx, userDeviceID, deviceDefinitionID, vin)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullBlackbookData indicates an expected call of PullBlackbookData.
func (mr *MockIDeviceDefinitionServiceMockRecorder) PullBlackbookData(ctx, userDeviceID, deviceDefinitionID, vin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullBlackbookData", reflect.TypeOf((*MockIDeviceDefinitionService)(nil).PullBlackbookData), ctx, userDeviceID, deviceDefinitionID, vin)
}

// PullDrivlyData mocks base method.
func (m *MockIDeviceDefinitionService) PullDrivlyData(ctx context.Context, userDeviceID, deviceDefinitionID, vin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullDrivlyData", ctx, userDeviceID, deviceDefinitionID, vin)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullDrivlyData indicates an expected call of PullDrivlyData.
func (mr *MockIDeviceDefinitionServiceMockRecorder) PullDrivlyData(ctx, userDeviceID, deviceDefinitionID, vin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullDrivlyData", reflect.TypeOf((*MockIDeviceDefinitionService)(nil).PullDrivlyData), ctx, userDeviceID, deviceDefinitionID, vin)
}

// UpdateDeviceDefinitionFromNHTSA mocks base method.
func (m *MockIDeviceDefinitionService) UpdateDeviceDefinitionFromNHTSA(ctx context.Context, deviceDefinitionID, vin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceDefinitionFromNHTSA", ctx, deviceDefinitionID, vin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceDefinitionFromNHTSA indicates an expected call of UpdateDeviceDefinitionFromNHTSA.
func (mr *MockIDeviceDefinitionServiceMockRecorder) UpdateDeviceDefinitionFromNHTSA(ctx, deviceDefinitionID, vin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceDefinitionFromNHTSA", reflect.TypeOf((*MockIDeviceDefinitionService)(nil).UpdateDeviceDefinitionFromNHTSA), ctx, deviceDefinitionID, vin)
}
