// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DrivlyDatum is an object representing the database table.
type DrivlyDatum struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceDefinitionID null.String `boil:"device_definition_id" json:"device_definition_id,omitempty" toml:"device_definition_id" yaml:"device_definition_id,omitempty"`
	Vin                string      `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	UserDeviceID       null.String `boil:"user_device_id" json:"user_device_id,omitempty" toml:"user_device_id" yaml:"user_device_id,omitempty"`
	VinMetadata        null.JSON   `boil:"vin_metadata" json:"vin_metadata,omitempty" toml:"vin_metadata" yaml:"vin_metadata,omitempty"`
	OfferMetadata      null.JSON   `boil:"offer_metadata" json:"offer_metadata,omitempty" toml:"offer_metadata" yaml:"offer_metadata,omitempty"`
	AutocheckMetadata  null.JSON   `boil:"autocheck_metadata" json:"autocheck_metadata,omitempty" toml:"autocheck_metadata" yaml:"autocheck_metadata,omitempty"`
	BuildMetadata      null.JSON   `boil:"build_metadata" json:"build_metadata,omitempty" toml:"build_metadata" yaml:"build_metadata,omitempty"`
	CargurusMetadata   null.JSON   `boil:"cargurus_metadata" json:"cargurus_metadata,omitempty" toml:"cargurus_metadata" yaml:"cargurus_metadata,omitempty"`
	CarvanaMetadata    null.JSON   `boil:"carvana_metadata" json:"carvana_metadata,omitempty" toml:"carvana_metadata" yaml:"carvana_metadata,omitempty"`
	CarmaxMetadata     null.JSON   `boil:"carmax_metadata" json:"carmax_metadata,omitempty" toml:"carmax_metadata" yaml:"carmax_metadata,omitempty"`
	CarstoryMetadata   null.JSON   `boil:"carstory_metadata" json:"carstory_metadata,omitempty" toml:"carstory_metadata" yaml:"carstory_metadata,omitempty"`
	EdmundsMetadata    null.JSON   `boil:"edmunds_metadata" json:"edmunds_metadata,omitempty" toml:"edmunds_metadata" yaml:"edmunds_metadata,omitempty"`
	TMVMetadata        null.JSON   `boil:"tmv_metadata" json:"tmv_metadata,omitempty" toml:"tmv_metadata" yaml:"tmv_metadata,omitempty"`
	KBBMetadata        null.JSON   `boil:"kbb_metadata" json:"kbb_metadata,omitempty" toml:"kbb_metadata" yaml:"kbb_metadata,omitempty"`
	VroomMetadata      null.JSON   `boil:"vroom_metadata" json:"vroom_metadata,omitempty" toml:"vroom_metadata" yaml:"vroom_metadata,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *drivlyDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L drivlyDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DrivlyDatumColumns = struct {
	ID                 string
	DeviceDefinitionID string
	Vin                string
	UserDeviceID       string
	VinMetadata        string
	OfferMetadata      string
	AutocheckMetadata  string
	BuildMetadata      string
	CargurusMetadata   string
	CarvanaMetadata    string
	CarmaxMetadata     string
	CarstoryMetadata   string
	EdmundsMetadata    string
	TMVMetadata        string
	KBBMetadata        string
	VroomMetadata      string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	DeviceDefinitionID: "device_definition_id",
	Vin:                "vin",
	UserDeviceID:       "user_device_id",
	VinMetadata:        "vin_metadata",
	OfferMetadata:      "offer_metadata",
	AutocheckMetadata:  "autocheck_metadata",
	BuildMetadata:      "build_metadata",
	CargurusMetadata:   "cargurus_metadata",
	CarvanaMetadata:    "carvana_metadata",
	CarmaxMetadata:     "carmax_metadata",
	CarstoryMetadata:   "carstory_metadata",
	EdmundsMetadata:    "edmunds_metadata",
	TMVMetadata:        "tmv_metadata",
	KBBMetadata:        "kbb_metadata",
	VroomMetadata:      "vroom_metadata",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var DrivlyDatumTableColumns = struct {
	ID                 string
	DeviceDefinitionID string
	Vin                string
	UserDeviceID       string
	VinMetadata        string
	OfferMetadata      string
	AutocheckMetadata  string
	BuildMetadata      string
	CargurusMetadata   string
	CarvanaMetadata    string
	CarmaxMetadata     string
	CarstoryMetadata   string
	EdmundsMetadata    string
	TMVMetadata        string
	KBBMetadata        string
	VroomMetadata      string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "drivly_data.id",
	DeviceDefinitionID: "drivly_data.device_definition_id",
	Vin:                "drivly_data.vin",
	UserDeviceID:       "drivly_data.user_device_id",
	VinMetadata:        "drivly_data.vin_metadata",
	OfferMetadata:      "drivly_data.offer_metadata",
	AutocheckMetadata:  "drivly_data.autocheck_metadata",
	BuildMetadata:      "drivly_data.build_metadata",
	CargurusMetadata:   "drivly_data.cargurus_metadata",
	CarvanaMetadata:    "drivly_data.carvana_metadata",
	CarmaxMetadata:     "drivly_data.carmax_metadata",
	CarstoryMetadata:   "drivly_data.carstory_metadata",
	EdmundsMetadata:    "drivly_data.edmunds_metadata",
	TMVMetadata:        "drivly_data.tmv_metadata",
	KBBMetadata:        "drivly_data.kbb_metadata",
	VroomMetadata:      "drivly_data.vroom_metadata",
	CreatedAt:          "drivly_data.created_at",
	UpdatedAt:          "drivly_data.updated_at",
}

// Generated where

var DrivlyDatumWhere = struct {
	ID                 whereHelperstring
	DeviceDefinitionID whereHelpernull_String
	Vin                whereHelperstring
	UserDeviceID       whereHelpernull_String
	VinMetadata        whereHelpernull_JSON
	OfferMetadata      whereHelpernull_JSON
	AutocheckMetadata  whereHelpernull_JSON
	BuildMetadata      whereHelpernull_JSON
	CargurusMetadata   whereHelpernull_JSON
	CarvanaMetadata    whereHelpernull_JSON
	CarmaxMetadata     whereHelpernull_JSON
	CarstoryMetadata   whereHelpernull_JSON
	EdmundsMetadata    whereHelpernull_JSON
	TMVMetadata        whereHelpernull_JSON
	KBBMetadata        whereHelpernull_JSON
	VroomMetadata      whereHelpernull_JSON
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"devices_api\".\"drivly_data\".\"id\""},
	DeviceDefinitionID: whereHelpernull_String{field: "\"devices_api\".\"drivly_data\".\"device_definition_id\""},
	Vin:                whereHelperstring{field: "\"devices_api\".\"drivly_data\".\"vin\""},
	UserDeviceID:       whereHelpernull_String{field: "\"devices_api\".\"drivly_data\".\"user_device_id\""},
	VinMetadata:        whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"vin_metadata\""},
	OfferMetadata:      whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"offer_metadata\""},
	AutocheckMetadata:  whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"autocheck_metadata\""},
	BuildMetadata:      whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"build_metadata\""},
	CargurusMetadata:   whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"cargurus_metadata\""},
	CarvanaMetadata:    whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"carvana_metadata\""},
	CarmaxMetadata:     whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"carmax_metadata\""},
	CarstoryMetadata:   whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"carstory_metadata\""},
	EdmundsMetadata:    whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"edmunds_metadata\""},
	TMVMetadata:        whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"tmv_metadata\""},
	KBBMetadata:        whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"kbb_metadata\""},
	VroomMetadata:      whereHelpernull_JSON{field: "\"devices_api\".\"drivly_data\".\"vroom_metadata\""},
	CreatedAt:          whereHelpertime_Time{field: "\"devices_api\".\"drivly_data\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"devices_api\".\"drivly_data\".\"updated_at\""},
}

// DrivlyDatumRels is where relationship names are stored.
var DrivlyDatumRels = struct {
	DeviceDefinition string
	UserDevice       string
}{
	DeviceDefinition: "DeviceDefinition",
	UserDevice:       "UserDevice",
}

// drivlyDatumR is where relationships are stored.
type drivlyDatumR struct {
	DeviceDefinition *DeviceDefinition `boil:"DeviceDefinition" json:"DeviceDefinition" toml:"DeviceDefinition" yaml:"DeviceDefinition"`
	UserDevice       *UserDevice       `boil:"UserDevice" json:"UserDevice" toml:"UserDevice" yaml:"UserDevice"`
}

// NewStruct creates a new relationship struct
func (*drivlyDatumR) NewStruct() *drivlyDatumR {
	return &drivlyDatumR{}
}

// drivlyDatumL is where Load methods for each relationship are stored.
type drivlyDatumL struct{}

var (
	drivlyDatumAllColumns            = []string{"id", "device_definition_id", "vin", "user_device_id", "vin_metadata", "offer_metadata", "autocheck_metadata", "build_metadata", "cargurus_metadata", "carvana_metadata", "carmax_metadata", "carstory_metadata", "edmunds_metadata", "tmv_metadata", "kbb_metadata", "vroom_metadata", "created_at", "updated_at"}
	drivlyDatumColumnsWithoutDefault = []string{"id", "vin"}
	drivlyDatumColumnsWithDefault    = []string{"device_definition_id", "user_device_id", "vin_metadata", "offer_metadata", "autocheck_metadata", "build_metadata", "cargurus_metadata", "carvana_metadata", "carmax_metadata", "carstory_metadata", "edmunds_metadata", "tmv_metadata", "kbb_metadata", "vroom_metadata", "created_at", "updated_at"}
	drivlyDatumPrimaryKeyColumns     = []string{"id"}
	drivlyDatumGeneratedColumns      = []string{}
)

type (
	// DrivlyDatumSlice is an alias for a slice of pointers to DrivlyDatum.
	// This should almost always be used instead of []DrivlyDatum.
	DrivlyDatumSlice []*DrivlyDatum
	// DrivlyDatumHook is the signature for custom DrivlyDatum hook methods
	DrivlyDatumHook func(context.Context, boil.ContextExecutor, *DrivlyDatum) error

	drivlyDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	drivlyDatumType                 = reflect.TypeOf(&DrivlyDatum{})
	drivlyDatumMapping              = queries.MakeStructMapping(drivlyDatumType)
	drivlyDatumPrimaryKeyMapping, _ = queries.BindMapping(drivlyDatumType, drivlyDatumMapping, drivlyDatumPrimaryKeyColumns)
	drivlyDatumInsertCacheMut       sync.RWMutex
	drivlyDatumInsertCache          = make(map[string]insertCache)
	drivlyDatumUpdateCacheMut       sync.RWMutex
	drivlyDatumUpdateCache          = make(map[string]updateCache)
	drivlyDatumUpsertCacheMut       sync.RWMutex
	drivlyDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var drivlyDatumAfterSelectHooks []DrivlyDatumHook

var drivlyDatumBeforeInsertHooks []DrivlyDatumHook
var drivlyDatumAfterInsertHooks []DrivlyDatumHook

var drivlyDatumBeforeUpdateHooks []DrivlyDatumHook
var drivlyDatumAfterUpdateHooks []DrivlyDatumHook

var drivlyDatumBeforeDeleteHooks []DrivlyDatumHook
var drivlyDatumAfterDeleteHooks []DrivlyDatumHook

var drivlyDatumBeforeUpsertHooks []DrivlyDatumHook
var drivlyDatumAfterUpsertHooks []DrivlyDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DrivlyDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DrivlyDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DrivlyDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DrivlyDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DrivlyDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DrivlyDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DrivlyDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DrivlyDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DrivlyDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range drivlyDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDrivlyDatumHook registers your hook function for all future operations.
func AddDrivlyDatumHook(hookPoint boil.HookPoint, drivlyDatumHook DrivlyDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		drivlyDatumAfterSelectHooks = append(drivlyDatumAfterSelectHooks, drivlyDatumHook)
	case boil.BeforeInsertHook:
		drivlyDatumBeforeInsertHooks = append(drivlyDatumBeforeInsertHooks, drivlyDatumHook)
	case boil.AfterInsertHook:
		drivlyDatumAfterInsertHooks = append(drivlyDatumAfterInsertHooks, drivlyDatumHook)
	case boil.BeforeUpdateHook:
		drivlyDatumBeforeUpdateHooks = append(drivlyDatumBeforeUpdateHooks, drivlyDatumHook)
	case boil.AfterUpdateHook:
		drivlyDatumAfterUpdateHooks = append(drivlyDatumAfterUpdateHooks, drivlyDatumHook)
	case boil.BeforeDeleteHook:
		drivlyDatumBeforeDeleteHooks = append(drivlyDatumBeforeDeleteHooks, drivlyDatumHook)
	case boil.AfterDeleteHook:
		drivlyDatumAfterDeleteHooks = append(drivlyDatumAfterDeleteHooks, drivlyDatumHook)
	case boil.BeforeUpsertHook:
		drivlyDatumBeforeUpsertHooks = append(drivlyDatumBeforeUpsertHooks, drivlyDatumHook)
	case boil.AfterUpsertHook:
		drivlyDatumAfterUpsertHooks = append(drivlyDatumAfterUpsertHooks, drivlyDatumHook)
	}
}

// One returns a single drivlyDatum record from the query.
func (q drivlyDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DrivlyDatum, error) {
	o := &DrivlyDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for drivly_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DrivlyDatum records from the query.
func (q drivlyDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DrivlyDatumSlice, error) {
	var o []*DrivlyDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DrivlyDatum slice")
	}

	if len(drivlyDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DrivlyDatum records in the query.
func (q drivlyDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count drivly_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q drivlyDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if drivly_data exists")
	}

	return count > 0, nil
}

// DeviceDefinition pointed to by the foreign key.
func (o *DrivlyDatum) DeviceDefinition(mods ...qm.QueryMod) deviceDefinitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeviceDefinitionID),
	}

	queryMods = append(queryMods, mods...)

	query := DeviceDefinitions(queryMods...)
	queries.SetFrom(query.Query, "\"devices_api\".\"device_definitions\"")

	return query
}

// UserDevice pointed to by the foreign key.
func (o *DrivlyDatum) UserDevice(mods ...qm.QueryMod) userDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserDeviceID),
	}

	queryMods = append(queryMods, mods...)

	query := UserDevices(queryMods...)
	queries.SetFrom(query.Query, "\"devices_api\".\"user_devices\"")

	return query
}

// LoadDeviceDefinition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drivlyDatumL) LoadDeviceDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrivlyDatum interface{}, mods queries.Applicator) error {
	var slice []*DrivlyDatum
	var object *DrivlyDatum

	if singular {
		object = maybeDrivlyDatum.(*DrivlyDatum)
	} else {
		slice = *maybeDrivlyDatum.(*[]*DrivlyDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drivlyDatumR{}
		}
		if !queries.IsNil(object.DeviceDefinitionID) {
			args = append(args, object.DeviceDefinitionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drivlyDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DeviceDefinitionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DeviceDefinitionID) {
				args = append(args, obj.DeviceDefinitionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.device_definitions`),
		qm.WhereIn(`devices_api.device_definitions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceDefinition")
	}

	var resultSlice []*DeviceDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceDefinition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_definitions")
	}

	if len(drivlyDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeviceDefinition = foreign
		if foreign.R == nil {
			foreign.R = &deviceDefinitionR{}
		}
		foreign.R.DrivlyData = append(foreign.R.DrivlyData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DeviceDefinitionID, foreign.ID) {
				local.R.DeviceDefinition = foreign
				if foreign.R == nil {
					foreign.R = &deviceDefinitionR{}
				}
				foreign.R.DrivlyData = append(foreign.R.DrivlyData, local)
				break
			}
		}
	}

	return nil
}

// LoadUserDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (drivlyDatumL) LoadUserDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDrivlyDatum interface{}, mods queries.Applicator) error {
	var slice []*DrivlyDatum
	var object *DrivlyDatum

	if singular {
		object = maybeDrivlyDatum.(*DrivlyDatum)
	} else {
		slice = *maybeDrivlyDatum.(*[]*DrivlyDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &drivlyDatumR{}
		}
		if !queries.IsNil(object.UserDeviceID) {
			args = append(args, object.UserDeviceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &drivlyDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserDeviceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserDeviceID) {
				args = append(args, obj.UserDeviceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.user_devices`),
		qm.WhereIn(`devices_api.user_devices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDevice")
	}

	var resultSlice []*UserDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_devices")
	}

	if len(drivlyDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserDevice = foreign
		if foreign.R == nil {
			foreign.R = &userDeviceR{}
		}
		foreign.R.DrivlyData = append(foreign.R.DrivlyData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserDeviceID, foreign.ID) {
				local.R.UserDevice = foreign
				if foreign.R == nil {
					foreign.R = &userDeviceR{}
				}
				foreign.R.DrivlyData = append(foreign.R.DrivlyData, local)
				break
			}
		}
	}

	return nil
}

// SetDeviceDefinition of the drivlyDatum to the related item.
// Sets o.R.DeviceDefinition to related.
// Adds o to related.R.DrivlyData.
func (o *DrivlyDatum) SetDeviceDefinition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeviceDefinition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"drivly_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"device_definition_id"}),
		strmangle.WhereClause("\"", "\"", 2, drivlyDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DeviceDefinitionID, related.ID)
	if o.R == nil {
		o.R = &drivlyDatumR{
			DeviceDefinition: related,
		}
	} else {
		o.R.DeviceDefinition = related
	}

	if related.R == nil {
		related.R = &deviceDefinitionR{
			DrivlyData: DrivlyDatumSlice{o},
		}
	} else {
		related.R.DrivlyData = append(related.R.DrivlyData, o)
	}

	return nil
}

// RemoveDeviceDefinition relationship.
// Sets o.R.DeviceDefinition to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DrivlyDatum) RemoveDeviceDefinition(ctx context.Context, exec boil.ContextExecutor, related *DeviceDefinition) error {
	var err error

	queries.SetScanner(&o.DeviceDefinitionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("device_definition_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DeviceDefinition = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DrivlyData {
		if queries.Equal(o.DeviceDefinitionID, ri.DeviceDefinitionID) {
			continue
		}

		ln := len(related.R.DrivlyData)
		if ln > 1 && i < ln-1 {
			related.R.DrivlyData[i] = related.R.DrivlyData[ln-1]
		}
		related.R.DrivlyData = related.R.DrivlyData[:ln-1]
		break
	}
	return nil
}

// SetUserDevice of the drivlyDatum to the related item.
// Sets o.R.UserDevice to related.
// Adds o to related.R.DrivlyData.
func (o *DrivlyDatum) SetUserDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"drivly_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_device_id"}),
		strmangle.WhereClause("\"", "\"", 2, drivlyDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserDeviceID, related.ID)
	if o.R == nil {
		o.R = &drivlyDatumR{
			UserDevice: related,
		}
	} else {
		o.R.UserDevice = related
	}

	if related.R == nil {
		related.R = &userDeviceR{
			DrivlyData: DrivlyDatumSlice{o},
		}
	} else {
		related.R.DrivlyData = append(related.R.DrivlyData, o)
	}

	return nil
}

// RemoveUserDevice relationship.
// Sets o.R.UserDevice to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DrivlyDatum) RemoveUserDevice(ctx context.Context, exec boil.ContextExecutor, related *UserDevice) error {
	var err error

	queries.SetScanner(&o.UserDeviceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_device_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UserDevice = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DrivlyData {
		if queries.Equal(o.UserDeviceID, ri.UserDeviceID) {
			continue
		}

		ln := len(related.R.DrivlyData)
		if ln > 1 && i < ln-1 {
			related.R.DrivlyData[i] = related.R.DrivlyData[ln-1]
		}
		related.R.DrivlyData = related.R.DrivlyData[:ln-1]
		break
	}
	return nil
}

// DrivlyData retrieves all the records using an executor.
func DrivlyData(mods ...qm.QueryMod) drivlyDatumQuery {
	mods = append(mods, qm.From("\"devices_api\".\"drivly_data\""))
	return drivlyDatumQuery{NewQuery(mods...)}
}

// FindDrivlyDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDrivlyDatum(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DrivlyDatum, error) {
	drivlyDatumObj := &DrivlyDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"drivly_data\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, drivlyDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from drivly_data")
	}

	if err = drivlyDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return drivlyDatumObj, err
	}

	return drivlyDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DrivlyDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no drivly_data provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(drivlyDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	drivlyDatumInsertCacheMut.RLock()
	cache, cached := drivlyDatumInsertCache[key]
	drivlyDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			drivlyDatumAllColumns,
			drivlyDatumColumnsWithDefault,
			drivlyDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(drivlyDatumType, drivlyDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(drivlyDatumType, drivlyDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"drivly_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"drivly_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into drivly_data")
	}

	if !cached {
		drivlyDatumInsertCacheMut.Lock()
		drivlyDatumInsertCache[key] = cache
		drivlyDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DrivlyDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DrivlyDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	drivlyDatumUpdateCacheMut.RLock()
	cache, cached := drivlyDatumUpdateCache[key]
	drivlyDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			drivlyDatumAllColumns,
			drivlyDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update drivly_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"drivly_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, drivlyDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(drivlyDatumType, drivlyDatumMapping, append(wl, drivlyDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update drivly_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for drivly_data")
	}

	if !cached {
		drivlyDatumUpdateCacheMut.Lock()
		drivlyDatumUpdateCache[key] = cache
		drivlyDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q drivlyDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for drivly_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for drivly_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DrivlyDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drivlyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"drivly_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, drivlyDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in drivlyDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all drivlyDatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DrivlyDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no drivly_data provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(drivlyDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	drivlyDatumUpsertCacheMut.RLock()
	cache, cached := drivlyDatumUpsertCache[key]
	drivlyDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			drivlyDatumAllColumns,
			drivlyDatumColumnsWithDefault,
			drivlyDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			drivlyDatumAllColumns,
			drivlyDatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert drivly_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(drivlyDatumPrimaryKeyColumns))
			copy(conflict, drivlyDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"drivly_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(drivlyDatumType, drivlyDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(drivlyDatumType, drivlyDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert drivly_data")
	}

	if !cached {
		drivlyDatumUpsertCacheMut.Lock()
		drivlyDatumUpsertCache[key] = cache
		drivlyDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DrivlyDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DrivlyDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DrivlyDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), drivlyDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"drivly_data\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from drivly_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for drivly_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q drivlyDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no drivlyDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from drivly_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for drivly_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DrivlyDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(drivlyDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drivlyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"drivly_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, drivlyDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from drivlyDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for drivly_data")
	}

	if len(drivlyDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DrivlyDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDrivlyDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DrivlyDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DrivlyDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), drivlyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"drivly_data\".* FROM \"devices_api\".\"drivly_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, drivlyDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DrivlyDatumSlice")
	}

	*o = slice

	return nil
}

// DrivlyDatumExists checks if the DrivlyDatum row exists.
func DrivlyDatumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"drivly_data\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if drivly_data exists")
	}

	return exists, nil
}
