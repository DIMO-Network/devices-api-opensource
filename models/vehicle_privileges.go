// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// VehiclePrivilege is an object representing the database table.
type VehiclePrivilege struct {
	TokenID     types.Decimal `boil:"token_id" json:"token_id" toml:"token_id" yaml:"token_id"`
	PrivilegeID int64         `boil:"privilege_id" json:"privilege_id" toml:"privilege_id" yaml:"privilege_id"`
	UserAddress []byte        `boil:"user_address" json:"user_address" toml:"user_address" yaml:"user_address"`
	ExpiresAt   time.Time     `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`

	R *vehiclePrivilegeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vehiclePrivilegeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VehiclePrivilegeColumns = struct {
	TokenID     string
	PrivilegeID string
	UserAddress string
	ExpiresAt   string
}{
	TokenID:     "token_id",
	PrivilegeID: "privilege_id",
	UserAddress: "user_address",
	ExpiresAt:   "expires_at",
}

var VehiclePrivilegeTableColumns = struct {
	TokenID     string
	PrivilegeID string
	UserAddress string
	ExpiresAt   string
}{
	TokenID:     "vehicle_privileges.token_id",
	PrivilegeID: "vehicle_privileges.privilege_id",
	UserAddress: "vehicle_privileges.user_address",
	ExpiresAt:   "vehicle_privileges.expires_at",
}

// Generated where

var VehiclePrivilegeWhere = struct {
	TokenID     whereHelpertypes_Decimal
	PrivilegeID whereHelperint64
	UserAddress whereHelper__byte
	ExpiresAt   whereHelpertime_Time
}{
	TokenID:     whereHelpertypes_Decimal{field: "\"devices_api\".\"vehicle_privileges\".\"token_id\""},
	PrivilegeID: whereHelperint64{field: "\"devices_api\".\"vehicle_privileges\".\"privilege_id\""},
	UserAddress: whereHelper__byte{field: "\"devices_api\".\"vehicle_privileges\".\"user_address\""},
	ExpiresAt:   whereHelpertime_Time{field: "\"devices_api\".\"vehicle_privileges\".\"expires_at\""},
}

// VehiclePrivilegeRels is where relationship names are stored.
var VehiclePrivilegeRels = struct {
	Token string
}{
	Token: "Token",
}

// vehiclePrivilegeR is where relationships are stored.
type vehiclePrivilegeR struct {
	Token *VehicleNFT `boil:"Token" json:"Token" toml:"Token" yaml:"Token"`
}

// NewStruct creates a new relationship struct
func (*vehiclePrivilegeR) NewStruct() *vehiclePrivilegeR {
	return &vehiclePrivilegeR{}
}

func (r *vehiclePrivilegeR) GetToken() *VehicleNFT {
	if r == nil {
		return nil
	}
	return r.Token
}

// vehiclePrivilegeL is where Load methods for each relationship are stored.
type vehiclePrivilegeL struct{}

var (
	vehiclePrivilegeAllColumns            = []string{"token_id", "privilege_id", "user_address", "expires_at"}
	vehiclePrivilegeColumnsWithoutDefault = []string{"token_id", "privilege_id", "user_address", "expires_at"}
	vehiclePrivilegeColumnsWithDefault    = []string{}
	vehiclePrivilegePrimaryKeyColumns     = []string{"token_id", "privilege_id", "user_address"}
	vehiclePrivilegeGeneratedColumns      = []string{}
)

type (
	// VehiclePrivilegeSlice is an alias for a slice of pointers to VehiclePrivilege.
	// This should almost always be used instead of []VehiclePrivilege.
	VehiclePrivilegeSlice []*VehiclePrivilege
	// VehiclePrivilegeHook is the signature for custom VehiclePrivilege hook methods
	VehiclePrivilegeHook func(context.Context, boil.ContextExecutor, *VehiclePrivilege) error

	vehiclePrivilegeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehiclePrivilegeType                 = reflect.TypeOf(&VehiclePrivilege{})
	vehiclePrivilegeMapping              = queries.MakeStructMapping(vehiclePrivilegeType)
	vehiclePrivilegePrimaryKeyMapping, _ = queries.BindMapping(vehiclePrivilegeType, vehiclePrivilegeMapping, vehiclePrivilegePrimaryKeyColumns)
	vehiclePrivilegeInsertCacheMut       sync.RWMutex
	vehiclePrivilegeInsertCache          = make(map[string]insertCache)
	vehiclePrivilegeUpdateCacheMut       sync.RWMutex
	vehiclePrivilegeUpdateCache          = make(map[string]updateCache)
	vehiclePrivilegeUpsertCacheMut       sync.RWMutex
	vehiclePrivilegeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vehiclePrivilegeAfterSelectHooks []VehiclePrivilegeHook

var vehiclePrivilegeBeforeInsertHooks []VehiclePrivilegeHook
var vehiclePrivilegeAfterInsertHooks []VehiclePrivilegeHook

var vehiclePrivilegeBeforeUpdateHooks []VehiclePrivilegeHook
var vehiclePrivilegeAfterUpdateHooks []VehiclePrivilegeHook

var vehiclePrivilegeBeforeDeleteHooks []VehiclePrivilegeHook
var vehiclePrivilegeAfterDeleteHooks []VehiclePrivilegeHook

var vehiclePrivilegeBeforeUpsertHooks []VehiclePrivilegeHook
var vehiclePrivilegeAfterUpsertHooks []VehiclePrivilegeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehiclePrivilege) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VehiclePrivilege) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VehiclePrivilege) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VehiclePrivilege) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VehiclePrivilege) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VehiclePrivilege) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VehiclePrivilege) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VehiclePrivilege) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VehiclePrivilege) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehiclePrivilegeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehiclePrivilegeHook registers your hook function for all future operations.
func AddVehiclePrivilegeHook(hookPoint boil.HookPoint, vehiclePrivilegeHook VehiclePrivilegeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehiclePrivilegeAfterSelectHooks = append(vehiclePrivilegeAfterSelectHooks, vehiclePrivilegeHook)
	case boil.BeforeInsertHook:
		vehiclePrivilegeBeforeInsertHooks = append(vehiclePrivilegeBeforeInsertHooks, vehiclePrivilegeHook)
	case boil.AfterInsertHook:
		vehiclePrivilegeAfterInsertHooks = append(vehiclePrivilegeAfterInsertHooks, vehiclePrivilegeHook)
	case boil.BeforeUpdateHook:
		vehiclePrivilegeBeforeUpdateHooks = append(vehiclePrivilegeBeforeUpdateHooks, vehiclePrivilegeHook)
	case boil.AfterUpdateHook:
		vehiclePrivilegeAfterUpdateHooks = append(vehiclePrivilegeAfterUpdateHooks, vehiclePrivilegeHook)
	case boil.BeforeDeleteHook:
		vehiclePrivilegeBeforeDeleteHooks = append(vehiclePrivilegeBeforeDeleteHooks, vehiclePrivilegeHook)
	case boil.AfterDeleteHook:
		vehiclePrivilegeAfterDeleteHooks = append(vehiclePrivilegeAfterDeleteHooks, vehiclePrivilegeHook)
	case boil.BeforeUpsertHook:
		vehiclePrivilegeBeforeUpsertHooks = append(vehiclePrivilegeBeforeUpsertHooks, vehiclePrivilegeHook)
	case boil.AfterUpsertHook:
		vehiclePrivilegeAfterUpsertHooks = append(vehiclePrivilegeAfterUpsertHooks, vehiclePrivilegeHook)
	}
}

// One returns a single vehiclePrivilege record from the query.
func (q vehiclePrivilegeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehiclePrivilege, error) {
	o := &VehiclePrivilege{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_privileges")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehiclePrivilege records from the query.
func (q vehiclePrivilegeQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehiclePrivilegeSlice, error) {
	var o []*VehiclePrivilege

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehiclePrivilege slice")
	}

	if len(vehiclePrivilegeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehiclePrivilege records in the query.
func (q vehiclePrivilegeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_privileges rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehiclePrivilegeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_privileges exists")
	}

	return count > 0, nil
}

// Token pointed to by the foreign key.
func (o *VehiclePrivilege) Token(mods ...qm.QueryMod) vehicleNFTQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token_id\" = ?", o.TokenID),
	}

	queryMods = append(queryMods, mods...)

	return VehicleNFTS(queryMods...)
}

// LoadToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vehiclePrivilegeL) LoadToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehiclePrivilege interface{}, mods queries.Applicator) error {
	var slice []*VehiclePrivilege
	var object *VehiclePrivilege

	if singular {
		var ok bool
		object, ok = maybeVehiclePrivilege.(*VehiclePrivilege)
		if !ok {
			object = new(VehiclePrivilege)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehiclePrivilege)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehiclePrivilege))
			}
		}
	} else {
		s, ok := maybeVehiclePrivilege.(*[]*VehiclePrivilege)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehiclePrivilege)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehiclePrivilege))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vehiclePrivilegeR{}
		}
		if !queries.IsNil(object.TokenID) {
			args = append(args, object.TokenID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehiclePrivilegeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TokenID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TokenID) {
				args = append(args, obj.TokenID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.vehicle_nfts`),
		qm.WhereIn(`devices_api.vehicle_nfts.token_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VehicleNFT")
	}

	var resultSlice []*VehicleNFT
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VehicleNFT")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vehicle_nfts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicle_nfts")
	}

	if len(vehiclePrivilegeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Token = foreign
		if foreign.R == nil {
			foreign.R = &vehicleNFTR{}
		}
		foreign.R.TokenVehiclePrivileges = append(foreign.R.TokenVehiclePrivileges, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TokenID, foreign.TokenID) {
				local.R.Token = foreign
				if foreign.R == nil {
					foreign.R = &vehicleNFTR{}
				}
				foreign.R.TokenVehiclePrivileges = append(foreign.R.TokenVehiclePrivileges, local)
				break
			}
		}
	}

	return nil
}

// SetToken of the vehiclePrivilege to the related item.
// Sets o.R.Token to related.
// Adds o to related.R.TokenVehiclePrivileges.
func (o *VehiclePrivilege) SetToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VehicleNFT) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"vehicle_privileges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"token_id"}),
		strmangle.WhereClause("\"", "\"", 2, vehiclePrivilegePrimaryKeyColumns),
	)
	values := []interface{}{related.TokenID, o.TokenID, o.PrivilegeID, o.UserAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TokenID, related.TokenID)
	if o.R == nil {
		o.R = &vehiclePrivilegeR{
			Token: related,
		}
	} else {
		o.R.Token = related
	}

	if related.R == nil {
		related.R = &vehicleNFTR{
			TokenVehiclePrivileges: VehiclePrivilegeSlice{o},
		}
	} else {
		related.R.TokenVehiclePrivileges = append(related.R.TokenVehiclePrivileges, o)
	}

	return nil
}

// VehiclePrivileges retrieves all the records using an executor.
func VehiclePrivileges(mods ...qm.QueryMod) vehiclePrivilegeQuery {
	mods = append(mods, qm.From("\"devices_api\".\"vehicle_privileges\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"vehicle_privileges\".*"})
	}

	return vehiclePrivilegeQuery{q}
}

// FindVehiclePrivilege retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVehiclePrivilege(ctx context.Context, exec boil.ContextExecutor, tokenID types.Decimal, privilegeID int64, userAddress []byte, selectCols ...string) (*VehiclePrivilege, error) {
	vehiclePrivilegeObj := &VehiclePrivilege{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"vehicle_privileges\" where \"token_id\"=$1 AND \"privilege_id\"=$2 AND \"user_address\"=$3", sel,
	)

	q := queries.Raw(query, tokenID, privilegeID, userAddress)

	err := q.Bind(ctx, exec, vehiclePrivilegeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vehicle_privileges")
	}

	if err = vehiclePrivilegeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vehiclePrivilegeObj, err
	}

	return vehiclePrivilegeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VehiclePrivilege) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_privileges provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehiclePrivilegeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vehiclePrivilegeInsertCacheMut.RLock()
	cache, cached := vehiclePrivilegeInsertCache[key]
	vehiclePrivilegeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vehiclePrivilegeAllColumns,
			vehiclePrivilegeColumnsWithDefault,
			vehiclePrivilegeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vehiclePrivilegeType, vehiclePrivilegeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vehiclePrivilegeType, vehiclePrivilegeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"vehicle_privileges\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"vehicle_privileges\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vehicle_privileges")
	}

	if !cached {
		vehiclePrivilegeInsertCacheMut.Lock()
		vehiclePrivilegeInsertCache[key] = cache
		vehiclePrivilegeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VehiclePrivilege.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VehiclePrivilege) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vehiclePrivilegeUpdateCacheMut.RLock()
	cache, cached := vehiclePrivilegeUpdateCache[key]
	vehiclePrivilegeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vehiclePrivilegeAllColumns,
			vehiclePrivilegePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vehicle_privileges, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"vehicle_privileges\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vehiclePrivilegePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vehiclePrivilegeType, vehiclePrivilegeMapping, append(wl, vehiclePrivilegePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vehicle_privileges row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vehicle_privileges")
	}

	if !cached {
		vehiclePrivilegeUpdateCacheMut.Lock()
		vehiclePrivilegeUpdateCache[key] = cache
		vehiclePrivilegeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vehiclePrivilegeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vehicle_privileges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vehicle_privileges")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VehiclePrivilegeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehiclePrivilegePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"vehicle_privileges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vehiclePrivilegePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vehiclePrivilege slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vehiclePrivilege")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VehiclePrivilege) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_privileges provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehiclePrivilegeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vehiclePrivilegeUpsertCacheMut.RLock()
	cache, cached := vehiclePrivilegeUpsertCache[key]
	vehiclePrivilegeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vehiclePrivilegeAllColumns,
			vehiclePrivilegeColumnsWithDefault,
			vehiclePrivilegeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vehiclePrivilegeAllColumns,
			vehiclePrivilegePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vehicle_privileges, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vehiclePrivilegePrimaryKeyColumns))
			copy(conflict, vehiclePrivilegePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"vehicle_privileges\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vehiclePrivilegeType, vehiclePrivilegeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vehiclePrivilegeType, vehiclePrivilegeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vehicle_privileges")
	}

	if !cached {
		vehiclePrivilegeUpsertCacheMut.Lock()
		vehiclePrivilegeUpsertCache[key] = cache
		vehiclePrivilegeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VehiclePrivilege record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VehiclePrivilege) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VehiclePrivilege provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vehiclePrivilegePrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"vehicle_privileges\" WHERE \"token_id\"=$1 AND \"privilege_id\"=$2 AND \"user_address\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vehicle_privileges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vehicle_privileges")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vehiclePrivilegeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vehiclePrivilegeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicle_privileges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_privileges")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VehiclePrivilegeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vehiclePrivilegeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehiclePrivilegePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"vehicle_privileges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehiclePrivilegePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehiclePrivilege slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_privileges")
	}

	if len(vehiclePrivilegeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VehiclePrivilege) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVehiclePrivilege(ctx, exec, o.TokenID, o.PrivilegeID, o.UserAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VehiclePrivilegeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VehiclePrivilegeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehiclePrivilegePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"vehicle_privileges\".* FROM \"devices_api\".\"vehicle_privileges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehiclePrivilegePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VehiclePrivilegeSlice")
	}

	*o = slice

	return nil
}

// VehiclePrivilegeExists checks if the VehiclePrivilege row exists.
func VehiclePrivilegeExists(ctx context.Context, exec boil.ContextExecutor, tokenID types.Decimal, privilegeID int64, userAddress []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"vehicle_privileges\" where \"token_id\"=$1 AND \"privilege_id\"=$2 AND \"user_address\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tokenID, privilegeID, userAddress)
	}
	row := exec.QueryRowContext(ctx, sql, tokenID, privilegeID, userAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vehicle_privileges exists")
	}

	return exists, nil
}
